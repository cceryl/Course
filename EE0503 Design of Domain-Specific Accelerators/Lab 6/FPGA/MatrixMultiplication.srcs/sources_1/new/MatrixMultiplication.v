// Generated by CIRCT firtool-1.56.0
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// VCS coverage exclude_file
module mem_4096x8(	// src/main/scala/Memory.scala:39:24
  input  [11:0] R0_addr,
  input         R0_en,
                R0_clk,
  input  [11:0] R1_addr,
  input         R1_en,
                R1_clk,
  input  [11:0] R2_addr,
  input         R2_en,
                R2_clk,
  input  [11:0] R3_addr,
  input         R3_en,
                R3_clk,
  input  [11:0] R4_addr,
  input         R4_en,
                R4_clk,
  input  [11:0] R5_addr,
  input         R5_en,
                R5_clk,
  input  [11:0] R6_addr,
  input         R6_en,
                R6_clk,
  input  [11:0] W0_addr,
  input         W0_en,
                W0_clk,
  input  [7:0]  W0_data,
  input  [11:0] W1_addr,
  input         W1_en,
                W1_clk,
  input  [7:0]  W1_data,
  input  [11:0] W2_addr,
  input         W2_en,
                W2_clk,
  input  [7:0]  W2_data,
  input  [11:0] W3_addr,
  input         W3_en,
                W3_clk,
  input  [7:0]  W3_data,
  input  [11:0] W4_addr,
  input         W4_en,
                W4_clk,
  input  [7:0]  W4_data,
  input  [11:0] W5_addr,
  input         W5_en,
                W5_clk,
  input  [7:0]  W5_data,
  input  [11:0] W6_addr,
  input         W6_en,
                W6_clk,
  input  [7:0]  W6_data,
  output [7:0]  R0_data,
                R1_data,
                R2_data,
                R3_data,
                R4_data,
                R5_data,
                R6_data
);

  reg [7:0]  Memory[0:4095];	// src/main/scala/Memory.scala:39:24
  reg        _R0_en_d0;	// src/main/scala/Memory.scala:39:24
  reg [11:0] _R0_addr_d0;	// src/main/scala/Memory.scala:39:24
  always @(posedge R0_clk) begin	// src/main/scala/Memory.scala:39:24
    _R0_en_d0 <= R0_en;	// src/main/scala/Memory.scala:39:24
    _R0_addr_d0 <= R0_addr;	// src/main/scala/Memory.scala:39:24
  end // always @(posedge)
  reg        _R1_en_d0;	// src/main/scala/Memory.scala:39:24
  reg [11:0] _R1_addr_d0;	// src/main/scala/Memory.scala:39:24
  always @(posedge R1_clk) begin	// src/main/scala/Memory.scala:39:24
    _R1_en_d0 <= R1_en;	// src/main/scala/Memory.scala:39:24
    _R1_addr_d0 <= R1_addr;	// src/main/scala/Memory.scala:39:24
  end // always @(posedge)
  reg        _R2_en_d0;	// src/main/scala/Memory.scala:39:24
  reg [11:0] _R2_addr_d0;	// src/main/scala/Memory.scala:39:24
  always @(posedge R2_clk) begin	// src/main/scala/Memory.scala:39:24
    _R2_en_d0 <= R2_en;	// src/main/scala/Memory.scala:39:24
    _R2_addr_d0 <= R2_addr;	// src/main/scala/Memory.scala:39:24
  end // always @(posedge)
  reg        _R3_en_d0;	// src/main/scala/Memory.scala:39:24
  reg [11:0] _R3_addr_d0;	// src/main/scala/Memory.scala:39:24
  always @(posedge R3_clk) begin	// src/main/scala/Memory.scala:39:24
    _R3_en_d0 <= R3_en;	// src/main/scala/Memory.scala:39:24
    _R3_addr_d0 <= R3_addr;	// src/main/scala/Memory.scala:39:24
  end // always @(posedge)
  reg        _R4_en_d0;	// src/main/scala/Memory.scala:39:24
  reg [11:0] _R4_addr_d0;	// src/main/scala/Memory.scala:39:24
  always @(posedge R4_clk) begin	// src/main/scala/Memory.scala:39:24
    _R4_en_d0 <= R4_en;	// src/main/scala/Memory.scala:39:24
    _R4_addr_d0 <= R4_addr;	// src/main/scala/Memory.scala:39:24
  end // always @(posedge)
  reg        _R5_en_d0;	// src/main/scala/Memory.scala:39:24
  reg [11:0] _R5_addr_d0;	// src/main/scala/Memory.scala:39:24
  always @(posedge R5_clk) begin	// src/main/scala/Memory.scala:39:24
    _R5_en_d0 <= R5_en;	// src/main/scala/Memory.scala:39:24
    _R5_addr_d0 <= R5_addr;	// src/main/scala/Memory.scala:39:24
  end // always @(posedge)
  reg        _R6_en_d0;	// src/main/scala/Memory.scala:39:24
  reg [11:0] _R6_addr_d0;	// src/main/scala/Memory.scala:39:24
  always @(posedge R6_clk) begin	// src/main/scala/Memory.scala:39:24
    _R6_en_d0 <= R6_en;	// src/main/scala/Memory.scala:39:24
    _R6_addr_d0 <= R6_addr;	// src/main/scala/Memory.scala:39:24
  end // always @(posedge)
  always @(posedge W0_clk) begin	// src/main/scala/Memory.scala:39:24
    if (W0_en)	// src/main/scala/Memory.scala:39:24
      Memory[W0_addr] <= W0_data;	// src/main/scala/Memory.scala:39:24
    if (W1_en)	// src/main/scala/Memory.scala:39:24
      Memory[W1_addr] <= W1_data;	// src/main/scala/Memory.scala:39:24
    if (W2_en)	// src/main/scala/Memory.scala:39:24
      Memory[W2_addr] <= W2_data;	// src/main/scala/Memory.scala:39:24
    if (W3_en)	// src/main/scala/Memory.scala:39:24
      Memory[W3_addr] <= W3_data;	// src/main/scala/Memory.scala:39:24
    if (W4_en)	// src/main/scala/Memory.scala:39:24
      Memory[W4_addr] <= W4_data;	// src/main/scala/Memory.scala:39:24
    if (W5_en)	// src/main/scala/Memory.scala:39:24
      Memory[W5_addr] <= W5_data;	// src/main/scala/Memory.scala:39:24
    if (W6_en)	// src/main/scala/Memory.scala:39:24
      Memory[W6_addr] <= W6_data;	// src/main/scala/Memory.scala:39:24
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_MEM_	// src/main/scala/Memory.scala:39:24
    `ifdef RANDOMIZE_REG_INIT	// src/main/scala/Memory.scala:39:24
      reg [31:0] _RANDOM;	// src/main/scala/Memory.scala:39:24
      reg [31:0] _RANDOM_0;	// src/main/scala/Memory.scala:39:24
      reg [31:0] _RANDOM_1;	// src/main/scala/Memory.scala:39:24
    `endif // RANDOMIZE_REG_INIT
    reg [31:0] _RANDOM_MEM;	// src/main/scala/Memory.scala:39:24
    initial begin	// src/main/scala/Memory.scala:39:24
      `INIT_RANDOM_PROLOG_	// src/main/scala/Memory.scala:39:24
      `ifdef RANDOMIZE_MEM_INIT	// src/main/scala/Memory.scala:39:24
        for (logic [12:0] i = 13'h0; i < 13'h1000; i += 13'h1) begin
          _RANDOM_MEM = `RANDOM;	// src/main/scala/Memory.scala:39:24
          Memory[i[11:0]] = _RANDOM_MEM[7:0];	// src/main/scala/Memory.scala:39:24
        end	// src/main/scala/Memory.scala:39:24
      `endif // RANDOMIZE_MEM_INIT
      `ifdef RANDOMIZE_REG_INIT	// src/main/scala/Memory.scala:39:24
        _RANDOM = {`RANDOM};	// src/main/scala/Memory.scala:39:24
        _RANDOM_0 = {`RANDOM};	// src/main/scala/Memory.scala:39:24
        _RANDOM_1 = {`RANDOM};	// src/main/scala/Memory.scala:39:24
        _R0_en_d0 = _RANDOM[0];	// src/main/scala/Memory.scala:39:24
        _R0_addr_d0 = _RANDOM[12:1];	// src/main/scala/Memory.scala:39:24
        _R1_en_d0 = _RANDOM[13];	// src/main/scala/Memory.scala:39:24
        _R1_addr_d0 = _RANDOM[25:14];	// src/main/scala/Memory.scala:39:24
        _R2_en_d0 = _RANDOM[26];	// src/main/scala/Memory.scala:39:24
        _R2_addr_d0 = {_RANDOM[31:27], _RANDOM_0[6:0]};	// src/main/scala/Memory.scala:39:24
        _R3_en_d0 = _RANDOM_0[7];	// src/main/scala/Memory.scala:39:24
        _R3_addr_d0 = _RANDOM_0[19:8];	// src/main/scala/Memory.scala:39:24
        _R4_en_d0 = _RANDOM_0[20];	// src/main/scala/Memory.scala:39:24
        _R4_addr_d0 = {_RANDOM_0[31:21], _RANDOM_1[0]};	// src/main/scala/Memory.scala:39:24
        _R5_en_d0 = _RANDOM_1[1];	// src/main/scala/Memory.scala:39:24
        _R5_addr_d0 = _RANDOM_1[13:2];	// src/main/scala/Memory.scala:39:24
        _R6_en_d0 = _RANDOM_1[14];	// src/main/scala/Memory.scala:39:24
        _R6_addr_d0 = _RANDOM_1[26:15];	// src/main/scala/Memory.scala:39:24
      `endif // RANDOMIZE_REG_INIT
    end // initial
  `endif // ENABLE_INITIAL_MEM_
  assign R0_data = _R0_en_d0 ? Memory[_R0_addr_d0] : 8'bx;	// src/main/scala/Memory.scala:39:24
  assign R1_data = _R1_en_d0 ? Memory[_R1_addr_d0] : 8'bx;	// src/main/scala/Memory.scala:39:24
  assign R2_data = _R2_en_d0 ? Memory[_R2_addr_d0] : 8'bx;	// src/main/scala/Memory.scala:39:24
  assign R3_data = _R3_en_d0 ? Memory[_R3_addr_d0] : 8'bx;	// src/main/scala/Memory.scala:39:24
  assign R4_data = _R4_en_d0 ? Memory[_R4_addr_d0] : 8'bx;	// src/main/scala/Memory.scala:39:24
  assign R5_data = _R5_en_d0 ? Memory[_R5_addr_d0] : 8'bx;	// src/main/scala/Memory.scala:39:24
  assign R6_data = _R6_en_d0 ? Memory[_R6_addr_d0] : 8'bx;	// src/main/scala/Memory.scala:39:24
endmodule

module MemoryModule(	// <stdin>:3:3
  input         clock,	// <stdin>:4:11
                reset,	// <stdin>:5:11
  input  [31:0] io_dataIn,	// src/main/scala/Memory.scala:23:14
                io_address,	// src/main/scala/Memory.scala:23:14
  input  [1:0]  io_dataSize,	// src/main/scala/Memory.scala:23:14
  input         io_writeEnable,	// src/main/scala/Memory.scala:23:14
  output [31:0] io_dataOut	// src/main/scala/Memory.scala:23:14
);

  wire [7:0]  _mem_ext_R0_data;	// src/main/scala/Memory.scala:39:24
  wire [7:0]  _mem_ext_R1_data;	// src/main/scala/Memory.scala:39:24
  wire [7:0]  _mem_ext_R2_data;	// src/main/scala/Memory.scala:39:24
  wire [7:0]  _mem_ext_R3_data;	// src/main/scala/Memory.scala:39:24
  wire [7:0]  _mem_ext_R4_data;	// src/main/scala/Memory.scala:39:24
  wire [7:0]  _mem_ext_R5_data;	// src/main/scala/Memory.scala:39:24
  wire [7:0]  _mem_ext_R6_data;	// src/main/scala/Memory.scala:39:24
  wire        _GEN = io_dataSize == 2'h1;	// src/main/scala/Memory.scala:35:49
  wire        _GEN_0 = ~(|io_dataSize) | _GEN;	// src/main/scala/Memory.scala:35:{17,34,49}
  wire        _GEN_1 = io_dataSize == 2'h2;	// src/main/scala/Memory.scala:35:81
  `ifndef SYNTHESIS	// src/main/scala/Memory.scala:33:9
    always @(posedge clock) begin	// src/main/scala/Memory.scala:33:9
      if (~reset & (|(io_address[31:12]))) begin	// src/main/scala/Memory.scala:33:{9,21}
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/Memory.scala:33:9
          $error("Assertion failed: Address out of range\n    at Memory.scala:33 assert(io.address < cfg.memSize.U, \"Address out of range\")\n");	// src/main/scala/Memory.scala:33:9
        if (`STOP_COND_)	// src/main/scala/Memory.scala:33:9
          $fatal;	// src/main/scala/Memory.scala:33:9
      end
      if (~reset & ~(_GEN_0 | _GEN_1)) begin	// src/main/scala/Memory.scala:33:9, :34:9, :35:{34,66,81}
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/Memory.scala:34:9
          $error("Assertion failed: Invalid data size\n    at Memory.scala:34 assert(\n");	// src/main/scala/Memory.scala:34:9
        if (`STOP_COND_)	// src/main/scala/Memory.scala:34:9
          $fatal;	// src/main/scala/Memory.scala:34:9
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  wire        _GEN_2 = (|io_dataSize) & _GEN;	// src/main/scala/Memory.scala:35:{17,49}, :39:24, :43:25
  wire        _GEN_3 = io_writeEnable & _GEN_2;	// src/main/scala/Memory.scala:39:24, :42:24, :43:25
  wire [11:0] _GEN_4 = io_address[11:0] + 12'h1;	// src/main/scala/Memory.scala:45:18, :49:30
  wire        _GEN_5 = ~_GEN_0 & _GEN_1;	// src/main/scala/Memory.scala:35:{34,81}, :39:24, :43:25
  wire        _GEN_6 = io_writeEnable & _GEN_5;	// src/main/scala/Memory.scala:39:24, :42:24, :43:25
  mem_4096x8 mem_ext (	// src/main/scala/Memory.scala:39:24
    .R0_addr (io_address[11:0]),	// src/main/scala/Memory.scala:78:17
    .R0_en   (_GEN_5),	// src/main/scala/Memory.scala:39:24, :43:25
    .R0_clk  (clock),
    .R1_addr (io_address[11:0] + 12'h1),	// src/main/scala/Memory.scala:45:18, :49:30, :77:29
    .R1_en   (_GEN_5),	// src/main/scala/Memory.scala:39:24, :43:25
    .R1_clk  (clock),
    .R2_addr (io_address[11:0] + 12'h2),	// src/main/scala/Memory.scala:45:18, :54:30, :76:29
    .R2_en   (_GEN_5),	// src/main/scala/Memory.scala:39:24, :43:25
    .R2_clk  (clock),
    .R3_addr (io_address[11:0] + 12'h3),	// src/main/scala/Memory.scala:45:18, :55:30, :75:29
    .R3_en   (_GEN_5),	// src/main/scala/Memory.scala:39:24, :43:25
    .R3_clk  (clock),
    .R4_addr (io_address[11:0]),	// src/main/scala/Memory.scala:70:17
    .R4_en   (_GEN_2),	// src/main/scala/Memory.scala:39:24, :43:25
    .R4_clk  (clock),
    .R5_addr (io_address[11:0] + 12'h1),	// src/main/scala/Memory.scala:45:18, :49:30, :69:29
    .R5_en   (_GEN_2),	// src/main/scala/Memory.scala:39:24, :43:25
    .R5_clk  (clock),
    .R6_addr (io_address[11:0]),	// src/main/scala/Memory.scala:64:48
    .R6_en   (~(|io_dataSize)),	// src/main/scala/Memory.scala:35:17
    .R6_clk  (clock),
    .W0_addr (io_address[11:0] + 12'h3),	// src/main/scala/Memory.scala:45:18, :55:30
    .W0_en   (_GEN_6),	// src/main/scala/Memory.scala:39:24, :42:24, :43:25
    .W0_clk  (clock),
    .W0_data (io_dataIn[31:24]),	// src/main/scala/Memory.scala:55:46
    .W1_addr (io_address[11:0] + 12'h2),	// src/main/scala/Memory.scala:45:18, :54:30
    .W1_en   (_GEN_6),	// src/main/scala/Memory.scala:39:24, :42:24, :43:25
    .W1_clk  (clock),
    .W1_data (io_dataIn[23:16]),	// src/main/scala/Memory.scala:54:46
    .W2_addr (_GEN_4),	// src/main/scala/Memory.scala:49:30
    .W2_en   (_GEN_6),	// src/main/scala/Memory.scala:39:24, :42:24, :43:25
    .W2_clk  (clock),
    .W2_data (io_dataIn[15:8]),	// src/main/scala/Memory.scala:49:46
    .W3_addr (io_address[11:0]),	// src/main/scala/Memory.scala:45:18
    .W3_en   (_GEN_6),	// src/main/scala/Memory.scala:39:24, :42:24, :43:25
    .W3_clk  (clock),
    .W3_data (io_dataIn[7:0]),	// src/main/scala/Memory.scala:45:40
    .W4_addr (_GEN_4),	// src/main/scala/Memory.scala:49:30
    .W4_en   (_GEN_3),	// src/main/scala/Memory.scala:39:24, :42:24, :43:25
    .W4_clk  (clock),
    .W4_data (io_dataIn[15:8]),	// src/main/scala/Memory.scala:49:46
    .W5_addr (io_address[11:0]),	// src/main/scala/Memory.scala:45:18
    .W5_en   (_GEN_3),	// src/main/scala/Memory.scala:39:24, :42:24, :43:25
    .W5_clk  (clock),
    .W5_data (io_dataIn[7:0]),	// src/main/scala/Memory.scala:45:40
    .W6_addr (io_address[11:0]),	// src/main/scala/Memory.scala:45:18
    .W6_en   (io_writeEnable & ~(|io_dataSize)),	// src/main/scala/Memory.scala:35:17, :39:24, :42:24, :43:25
    .W6_clk  (clock),
    .W6_data (io_dataIn[7:0]),	// src/main/scala/Memory.scala:45:40
    .R0_data (_mem_ext_R0_data),
    .R1_data (_mem_ext_R1_data),
    .R2_data (_mem_ext_R2_data),
    .R3_data (_mem_ext_R3_data),
    .R4_data (_mem_ext_R4_data),
    .R5_data (_mem_ext_R5_data),
    .R6_data (_mem_ext_R6_data)
  );
  assign io_dataOut =
    (|io_dataSize)
      ? (_GEN
           ? {16'h0, _mem_ext_R5_data, _mem_ext_R4_data}
           : _GEN_1
               ? {_mem_ext_R3_data, _mem_ext_R2_data, _mem_ext_R1_data, _mem_ext_R0_data}
               : 32'h0)
      : {24'h0, _mem_ext_R6_data};	// <stdin>:3:3, src/main/scala/Memory.scala:35:{17,49,81}, :39:24, :61:14, :62:23, :64:{18,24,29}, :67:{18,24}, :68:13, :74:{18,24}
endmodule

module VecDotProductModule(	// <stdin>:146:3
  input  [7:0]  io_vecA_0,	// src/main/scala/VecDotProduct.scala:17:14
                io_vecA_1,	// src/main/scala/VecDotProduct.scala:17:14
                io_vecA_2,	// src/main/scala/VecDotProduct.scala:17:14
                io_vecA_3,	// src/main/scala/VecDotProduct.scala:17:14
                io_vecA_4,	// src/main/scala/VecDotProduct.scala:17:14
                io_vecA_5,	// src/main/scala/VecDotProduct.scala:17:14
                io_vecA_6,	// src/main/scala/VecDotProduct.scala:17:14
                io_vecA_7,	// src/main/scala/VecDotProduct.scala:17:14
                io_vecA_8,	// src/main/scala/VecDotProduct.scala:17:14
                io_vecA_9,	// src/main/scala/VecDotProduct.scala:17:14
                io_vecA_10,	// src/main/scala/VecDotProduct.scala:17:14
                io_vecA_11,	// src/main/scala/VecDotProduct.scala:17:14
                io_vecA_12,	// src/main/scala/VecDotProduct.scala:17:14
                io_vecA_13,	// src/main/scala/VecDotProduct.scala:17:14
                io_vecA_14,	// src/main/scala/VecDotProduct.scala:17:14
                io_vecA_15,	// src/main/scala/VecDotProduct.scala:17:14
                io_vecB_0,	// src/main/scala/VecDotProduct.scala:17:14
                io_vecB_1,	// src/main/scala/VecDotProduct.scala:17:14
                io_vecB_2,	// src/main/scala/VecDotProduct.scala:17:14
                io_vecB_3,	// src/main/scala/VecDotProduct.scala:17:14
                io_vecB_4,	// src/main/scala/VecDotProduct.scala:17:14
                io_vecB_5,	// src/main/scala/VecDotProduct.scala:17:14
                io_vecB_6,	// src/main/scala/VecDotProduct.scala:17:14
                io_vecB_7,	// src/main/scala/VecDotProduct.scala:17:14
                io_vecB_8,	// src/main/scala/VecDotProduct.scala:17:14
                io_vecB_9,	// src/main/scala/VecDotProduct.scala:17:14
                io_vecB_10,	// src/main/scala/VecDotProduct.scala:17:14
                io_vecB_11,	// src/main/scala/VecDotProduct.scala:17:14
                io_vecB_12,	// src/main/scala/VecDotProduct.scala:17:14
                io_vecB_13,	// src/main/scala/VecDotProduct.scala:17:14
                io_vecB_14,	// src/main/scala/VecDotProduct.scala:17:14
                io_vecB_15,	// src/main/scala/VecDotProduct.scala:17:14
  output [31:0] io_result	// src/main/scala/VecDotProduct.scala:17:14
);

  wire [17:0] _products_0_T = {10'h0, io_vecA_0} * {10'h0, io_vecB_0};	// src/main/scala/VecDotProduct.scala:35:31
  wire [17:0] _products_1_T = {10'h0, io_vecA_1} * {10'h0, io_vecB_1};	// src/main/scala/VecDotProduct.scala:35:31
  wire [17:0] _products_2_T = {10'h0, io_vecA_2} * {10'h0, io_vecB_2};	// src/main/scala/VecDotProduct.scala:35:31
  wire [17:0] _products_3_T = {10'h0, io_vecA_3} * {10'h0, io_vecB_3};	// src/main/scala/VecDotProduct.scala:35:31
  wire [17:0] _products_4_T = {10'h0, io_vecA_4} * {10'h0, io_vecB_4};	// src/main/scala/VecDotProduct.scala:35:31
  wire [17:0] _products_5_T = {10'h0, io_vecA_5} * {10'h0, io_vecB_5};	// src/main/scala/VecDotProduct.scala:35:31
  wire [17:0] _products_6_T = {10'h0, io_vecA_6} * {10'h0, io_vecB_6};	// src/main/scala/VecDotProduct.scala:35:31
  wire [17:0] _products_7_T = {10'h0, io_vecA_7} * {10'h0, io_vecB_7};	// src/main/scala/VecDotProduct.scala:35:31
  wire [17:0] _products_8_T = {10'h0, io_vecA_8} * {10'h0, io_vecB_8};	// src/main/scala/VecDotProduct.scala:35:31
  wire [17:0] _products_9_T = {10'h0, io_vecA_9} * {10'h0, io_vecB_9};	// src/main/scala/VecDotProduct.scala:35:31
  wire [17:0] _products_10_T = {10'h0, io_vecA_10} * {10'h0, io_vecB_10};	// src/main/scala/VecDotProduct.scala:35:31
  wire [17:0] _products_11_T = {10'h0, io_vecA_11} * {10'h0, io_vecB_11};	// src/main/scala/VecDotProduct.scala:35:31
  wire [17:0] _products_12_T = {10'h0, io_vecA_12} * {10'h0, io_vecB_12};	// src/main/scala/VecDotProduct.scala:35:31
  wire [17:0] _products_13_T = {10'h0, io_vecA_13} * {10'h0, io_vecB_13};	// src/main/scala/VecDotProduct.scala:35:31
  wire [17:0] _products_14_T = {10'h0, io_vecA_14} * {10'h0, io_vecB_14};	// src/main/scala/VecDotProduct.scala:35:31
  wire [17:0] _products_15_T = {10'h0, io_vecA_15} * {10'h0, io_vecB_15};	// src/main/scala/VecDotProduct.scala:35:31
  assign io_result =
    {{14{_products_0_T[17]}}, _products_0_T} + {{14{_products_1_T[17]}}, _products_1_T}
    + {{14{_products_2_T[17]}}, _products_2_T} + {{14{_products_3_T[17]}}, _products_3_T}
    + {{14{_products_4_T[17]}}, _products_4_T} + {{14{_products_5_T[17]}}, _products_5_T}
    + {{14{_products_6_T[17]}}, _products_6_T} + {{14{_products_7_T[17]}}, _products_7_T}
    + {{14{_products_8_T[17]}}, _products_8_T} + {{14{_products_9_T[17]}}, _products_9_T}
    + {{14{_products_10_T[17]}}, _products_10_T}
    + {{14{_products_11_T[17]}}, _products_11_T}
    + {{14{_products_12_T[17]}}, _products_12_T}
    + {{14{_products_13_T[17]}}, _products_13_T}
    + {{14{_products_14_T[17]}}, _products_14_T}
    + {{14{_products_15_T[17]}}, _products_15_T};	// <stdin>:146:3, src/main/scala/VecDotProduct.scala:35:{17,31}, :38:34
endmodule

module MatrixMultiplicationModule(	// <stdin>:265:3
  input         clock,	// <stdin>:266:11
                reset,	// <stdin>:267:11
                io_start,	// src/main/scala/MatrixMultiplication.scala:34:14
  input  [7:0]  io_dataIn,	// src/main/scala/MatrixMultiplication.scala:34:14
  input  [31:0] io_address,	// src/main/scala/MatrixMultiplication.scala:34:14
  input         io_writeEnable,	// src/main/scala/MatrixMultiplication.scala:34:14
  output        io_finish,	// src/main/scala/MatrixMultiplication.scala:34:14
  output [31:0] io_dataOut	// src/main/scala/MatrixMultiplication.scala:34:14
);

  wire [31:0]      _vecDotProductModule_io_result;	// src/main/scala/MatrixMultiplication.scala:57:35
  wire [31:0]      _memoryModule_io_dataOut;	// src/main/scala/MatrixMultiplication.scala:49:28
  reg  [7:0]       bufferRow_0;	// src/main/scala/MatrixMultiplication.scala:45:26
  reg  [7:0]       bufferRow_1;	// src/main/scala/MatrixMultiplication.scala:45:26
  reg  [7:0]       bufferRow_2;	// src/main/scala/MatrixMultiplication.scala:45:26
  reg  [7:0]       bufferRow_3;	// src/main/scala/MatrixMultiplication.scala:45:26
  reg  [7:0]       bufferRow_4;	// src/main/scala/MatrixMultiplication.scala:45:26
  reg  [7:0]       bufferRow_5;	// src/main/scala/MatrixMultiplication.scala:45:26
  reg  [7:0]       bufferRow_6;	// src/main/scala/MatrixMultiplication.scala:45:26
  reg  [7:0]       bufferRow_7;	// src/main/scala/MatrixMultiplication.scala:45:26
  reg  [7:0]       bufferRow_8;	// src/main/scala/MatrixMultiplication.scala:45:26
  reg  [7:0]       bufferRow_9;	// src/main/scala/MatrixMultiplication.scala:45:26
  reg  [7:0]       bufferRow_10;	// src/main/scala/MatrixMultiplication.scala:45:26
  reg  [7:0]       bufferRow_11;	// src/main/scala/MatrixMultiplication.scala:45:26
  reg  [7:0]       bufferRow_12;	// src/main/scala/MatrixMultiplication.scala:45:26
  reg  [7:0]       bufferRow_13;	// src/main/scala/MatrixMultiplication.scala:45:26
  reg  [7:0]       bufferRow_14;	// src/main/scala/MatrixMultiplication.scala:45:26
  reg  [7:0]       bufferRow_15;	// src/main/scala/MatrixMultiplication.scala:45:26
  reg  [7:0]       bufferCol_0;	// src/main/scala/MatrixMultiplication.scala:46:26
  reg  [7:0]       bufferCol_1;	// src/main/scala/MatrixMultiplication.scala:46:26
  reg  [7:0]       bufferCol_2;	// src/main/scala/MatrixMultiplication.scala:46:26
  reg  [7:0]       bufferCol_3;	// src/main/scala/MatrixMultiplication.scala:46:26
  reg  [7:0]       bufferCol_4;	// src/main/scala/MatrixMultiplication.scala:46:26
  reg  [7:0]       bufferCol_5;	// src/main/scala/MatrixMultiplication.scala:46:26
  reg  [7:0]       bufferCol_6;	// src/main/scala/MatrixMultiplication.scala:46:26
  reg  [7:0]       bufferCol_7;	// src/main/scala/MatrixMultiplication.scala:46:26
  reg  [7:0]       bufferCol_8;	// src/main/scala/MatrixMultiplication.scala:46:26
  reg  [7:0]       bufferCol_9;	// src/main/scala/MatrixMultiplication.scala:46:26
  reg  [7:0]       bufferCol_10;	// src/main/scala/MatrixMultiplication.scala:46:26
  reg  [7:0]       bufferCol_11;	// src/main/scala/MatrixMultiplication.scala:46:26
  reg  [7:0]       bufferCol_12;	// src/main/scala/MatrixMultiplication.scala:46:26
  reg  [7:0]       bufferCol_13;	// src/main/scala/MatrixMultiplication.scala:46:26
  reg  [7:0]       bufferCol_14;	// src/main/scala/MatrixMultiplication.scala:46:26
  reg  [7:0]       bufferCol_15;	// src/main/scala/MatrixMultiplication.scala:46:26
  reg  [1:0]       state;	// src/main/scala/MatrixMultiplication.scala:71:22
  reg  [3:0]       currentRow;	// src/main/scala/MatrixMultiplication.scala:72:27
  reg  [3:0]       currentCol;	// src/main/scala/MatrixMultiplication.scala:73:27
  reg              loadState;	// src/main/scala/MatrixMultiplication.scala:75:26
  reg  [3:0]       index;	// src/main/scala/MatrixMultiplication.scala:76:22
  reg              waitMem;	// src/main/scala/MatrixMultiplication.scala:77:24
  wire             _GEN = state == 2'h0;	// src/main/scala/MatrixMultiplication.scala:71:22, :90:17
  wire             _GEN_0 = state == 2'h1;	// src/main/scala/MatrixMultiplication.scala:71:22, :90:17, :94:15
  wire [8:0]       _GEN_1 = {1'h0, currentRow, 4'h0};	// <stdin>:265:3, src/main/scala/MatrixMultiplication.scala:72:27, :75:26, :101:84
  wire             _GEN_2 = state == 2'h2;	// src/main/scala/MatrixMultiplication.scala:71:22, :82:28, :90:17
  wire             _GEN_3 = _GEN | _GEN_0;	// src/main/scala/MatrixMultiplication.scala:80:26, :90:17
  wire             _GEN_4 = _GEN_3 | ~_GEN_2;	// src/main/scala/MatrixMultiplication.scala:80:26, :90:17
  wire [3:0][31:0] _GEN_5 =
    {{io_address},
     {{20'h0, {1'h0, _GEN_1 + {5'h0, currentCol}, 2'h0} + 12'h400}},
     {loadState
        ? {22'h0, {2'h0, index, 4'h0} + {6'h0, currentCol} - 10'h200}
        : {23'h0, _GEN_1 + {5'h0, index}}},
     {io_address}};	// <stdin>:265:3, src/main/scala/MatrixMultiplication.scala:71:22, :73:27, :75:26, :76:22, :81:27, :90:17, :100:35, :101:{33,68,84}, :116:35, :117:{33,55,79}, :135:{31,53,83}
  always @(posedge clock) begin	// <stdin>:266:11
    if (reset) begin	// <stdin>:266:11
      bufferRow_0 <= 8'h0;	// src/main/scala/MatrixMultiplication.scala:45:{26,34}
      bufferRow_1 <= 8'h0;	// src/main/scala/MatrixMultiplication.scala:45:{26,34}
      bufferRow_2 <= 8'h0;	// src/main/scala/MatrixMultiplication.scala:45:{26,34}
      bufferRow_3 <= 8'h0;	// src/main/scala/MatrixMultiplication.scala:45:{26,34}
      bufferRow_4 <= 8'h0;	// src/main/scala/MatrixMultiplication.scala:45:{26,34}
      bufferRow_5 <= 8'h0;	// src/main/scala/MatrixMultiplication.scala:45:{26,34}
      bufferRow_6 <= 8'h0;	// src/main/scala/MatrixMultiplication.scala:45:{26,34}
      bufferRow_7 <= 8'h0;	// src/main/scala/MatrixMultiplication.scala:45:{26,34}
      bufferRow_8 <= 8'h0;	// src/main/scala/MatrixMultiplication.scala:45:{26,34}
      bufferRow_9 <= 8'h0;	// src/main/scala/MatrixMultiplication.scala:45:{26,34}
      bufferRow_10 <= 8'h0;	// src/main/scala/MatrixMultiplication.scala:45:{26,34}
      bufferRow_11 <= 8'h0;	// src/main/scala/MatrixMultiplication.scala:45:{26,34}
      bufferRow_12 <= 8'h0;	// src/main/scala/MatrixMultiplication.scala:45:{26,34}
      bufferRow_13 <= 8'h0;	// src/main/scala/MatrixMultiplication.scala:45:{26,34}
      bufferRow_14 <= 8'h0;	// src/main/scala/MatrixMultiplication.scala:45:{26,34}
      bufferRow_15 <= 8'h0;	// src/main/scala/MatrixMultiplication.scala:45:{26,34}
      bufferCol_0 <= 8'h0;	// src/main/scala/MatrixMultiplication.scala:45:34, :46:26
      bufferCol_1 <= 8'h0;	// src/main/scala/MatrixMultiplication.scala:45:34, :46:26
      bufferCol_2 <= 8'h0;	// src/main/scala/MatrixMultiplication.scala:45:34, :46:26
      bufferCol_3 <= 8'h0;	// src/main/scala/MatrixMultiplication.scala:45:34, :46:26
      bufferCol_4 <= 8'h0;	// src/main/scala/MatrixMultiplication.scala:45:34, :46:26
      bufferCol_5 <= 8'h0;	// src/main/scala/MatrixMultiplication.scala:45:34, :46:26
      bufferCol_6 <= 8'h0;	// src/main/scala/MatrixMultiplication.scala:45:34, :46:26
      bufferCol_7 <= 8'h0;	// src/main/scala/MatrixMultiplication.scala:45:34, :46:26
      bufferCol_8 <= 8'h0;	// src/main/scala/MatrixMultiplication.scala:45:34, :46:26
      bufferCol_9 <= 8'h0;	// src/main/scala/MatrixMultiplication.scala:45:34, :46:26
      bufferCol_10 <= 8'h0;	// src/main/scala/MatrixMultiplication.scala:45:34, :46:26
      bufferCol_11 <= 8'h0;	// src/main/scala/MatrixMultiplication.scala:45:34, :46:26
      bufferCol_12 <= 8'h0;	// src/main/scala/MatrixMultiplication.scala:45:34, :46:26
      bufferCol_13 <= 8'h0;	// src/main/scala/MatrixMultiplication.scala:45:34, :46:26
      bufferCol_14 <= 8'h0;	// src/main/scala/MatrixMultiplication.scala:45:34, :46:26
      bufferCol_15 <= 8'h0;	// src/main/scala/MatrixMultiplication.scala:45:34, :46:26
      state <= 2'h0;	// src/main/scala/MatrixMultiplication.scala:71:22
      currentRow <= 4'h0;	// <stdin>:265:3, src/main/scala/MatrixMultiplication.scala:72:27
      currentCol <= 4'h0;	// <stdin>:265:3, src/main/scala/MatrixMultiplication.scala:73:27
      loadState <= 1'h0;	// src/main/scala/MatrixMultiplication.scala:75:26
      index <= 4'h0;	// <stdin>:265:3, src/main/scala/MatrixMultiplication.scala:76:22
      waitMem <= 1'h0;	// src/main/scala/MatrixMultiplication.scala:75:26, :77:24
    end
    else begin	// <stdin>:266:11
      automatic logic            _GEN_6;	// src/main/scala/MatrixMultiplication.scala:45:26, :90:17, :100:35, :102:23
      automatic logic            _GEN_7;	// src/main/scala/MatrixMultiplication.scala:106:28
      automatic logic            _GEN_8;	// src/main/scala/MatrixMultiplication.scala:106:28
      automatic logic            _GEN_9;	// src/main/scala/MatrixMultiplication.scala:106:28
      automatic logic            _GEN_10;	// src/main/scala/MatrixMultiplication.scala:106:28
      automatic logic            _GEN_11;	// src/main/scala/MatrixMultiplication.scala:106:28
      automatic logic            _GEN_12;	// src/main/scala/MatrixMultiplication.scala:106:28
      automatic logic            _GEN_13;	// src/main/scala/MatrixMultiplication.scala:106:28
      automatic logic            _GEN_14;	// src/main/scala/MatrixMultiplication.scala:106:28
      automatic logic            _GEN_15;	// src/main/scala/MatrixMultiplication.scala:106:28
      automatic logic            _GEN_16;	// src/main/scala/MatrixMultiplication.scala:106:28
      automatic logic            _GEN_17;	// src/main/scala/MatrixMultiplication.scala:106:28
      automatic logic            _GEN_18;	// src/main/scala/MatrixMultiplication.scala:106:28
      automatic logic            _GEN_19;	// src/main/scala/MatrixMultiplication.scala:106:28
      automatic logic            _GEN_20;	// src/main/scala/MatrixMultiplication.scala:106:28
      automatic logic            _GEN_21;	// src/main/scala/MatrixMultiplication.scala:46:26, :90:17, :116:35, :118:23
      automatic logic [3:0][1:0] _GEN_22;	// src/main/scala/MatrixMultiplication.scala:71:22, :90:17, :93:22, :116:35, :140:48, :159:13
      automatic logic [3:0]      _GEN_23;	// src/main/scala/MatrixMultiplication.scala:75:26, :90:17, :100:35, :140:48
      _GEN_6 = _GEN_0 & ~loadState;	// src/main/scala/MatrixMultiplication.scala:45:26, :75:26, :90:17, :100:{22,35}, :102:23
      _GEN_7 = index != 4'h1;	// <stdin>:265:3, src/main/scala/MatrixMultiplication.scala:76:22, :106:28
      _GEN_8 = index != 4'h2;	// <stdin>:265:3, src/main/scala/MatrixMultiplication.scala:76:22, :106:28
      _GEN_9 = index != 4'h3;	// <stdin>:265:3, src/main/scala/MatrixMultiplication.scala:76:22, :106:28
      _GEN_10 = index != 4'h4;	// <stdin>:265:3, src/main/scala/MatrixMultiplication.scala:76:22, :106:28
      _GEN_11 = index != 4'h5;	// <stdin>:265:3, src/main/scala/MatrixMultiplication.scala:76:22, :106:28
      _GEN_12 = index != 4'h6;	// <stdin>:265:3, src/main/scala/MatrixMultiplication.scala:76:22, :106:28
      _GEN_13 = index != 4'h7;	// <stdin>:265:3, src/main/scala/MatrixMultiplication.scala:76:22, :106:28
      _GEN_14 = index != 4'h8;	// <stdin>:265:3, src/main/scala/MatrixMultiplication.scala:76:22, :106:28
      _GEN_15 = index != 4'h9;	// <stdin>:265:3, src/main/scala/MatrixMultiplication.scala:76:22, :106:28
      _GEN_16 = index != 4'hA;	// src/main/scala/MatrixMultiplication.scala:76:22, :106:28
      _GEN_17 = index != 4'hB;	// src/main/scala/MatrixMultiplication.scala:76:22, :106:28
      _GEN_18 = index != 4'hC;	// src/main/scala/MatrixMultiplication.scala:76:22, :106:28
      _GEN_19 = index != 4'hD;	// src/main/scala/MatrixMultiplication.scala:76:22, :106:28
      _GEN_20 = index != 4'hE;	// src/main/scala/MatrixMultiplication.scala:76:22, :106:28
      _GEN_21 = _GEN_0 & loadState;	// src/main/scala/MatrixMultiplication.scala:46:26, :75:26, :90:17, :116:35, :118:23
      if (_GEN | ~_GEN_6 | waitMem | (|index)) begin	// src/main/scala/MatrixMultiplication.scala:45:26, :76:22, :77:24, :90:17, :100:35, :102:23, :106:28
      end
      else	// src/main/scala/MatrixMultiplication.scala:45:26, :90:17
        bufferRow_0 <= _memoryModule_io_dataOut[7:0];	// src/main/scala/MatrixMultiplication.scala:45:26, :49:28, :106:28
      if (_GEN | ~_GEN_6 | waitMem | _GEN_7) begin	// src/main/scala/MatrixMultiplication.scala:45:26, :77:24, :90:17, :100:35, :102:23, :106:28
      end
      else	// src/main/scala/MatrixMultiplication.scala:45:26, :90:17
        bufferRow_1 <= _memoryModule_io_dataOut[7:0];	// src/main/scala/MatrixMultiplication.scala:45:26, :49:28, :106:28
      if (_GEN | ~_GEN_6 | waitMem | _GEN_8) begin	// src/main/scala/MatrixMultiplication.scala:45:26, :77:24, :90:17, :100:35, :102:23, :106:28
      end
      else	// src/main/scala/MatrixMultiplication.scala:45:26, :90:17
        bufferRow_2 <= _memoryModule_io_dataOut[7:0];	// src/main/scala/MatrixMultiplication.scala:45:26, :49:28, :106:28
      if (_GEN | ~_GEN_6 | waitMem | _GEN_9) begin	// src/main/scala/MatrixMultiplication.scala:45:26, :77:24, :90:17, :100:35, :102:23, :106:28
      end
      else	// src/main/scala/MatrixMultiplication.scala:45:26, :90:17
        bufferRow_3 <= _memoryModule_io_dataOut[7:0];	// src/main/scala/MatrixMultiplication.scala:45:26, :49:28, :106:28
      if (_GEN | ~_GEN_6 | waitMem | _GEN_10) begin	// src/main/scala/MatrixMultiplication.scala:45:26, :77:24, :90:17, :100:35, :102:23, :106:28
      end
      else	// src/main/scala/MatrixMultiplication.scala:45:26, :90:17
        bufferRow_4 <= _memoryModule_io_dataOut[7:0];	// src/main/scala/MatrixMultiplication.scala:45:26, :49:28, :106:28
      if (_GEN | ~_GEN_6 | waitMem | _GEN_11) begin	// src/main/scala/MatrixMultiplication.scala:45:26, :77:24, :90:17, :100:35, :102:23, :106:28
      end
      else	// src/main/scala/MatrixMultiplication.scala:45:26, :90:17
        bufferRow_5 <= _memoryModule_io_dataOut[7:0];	// src/main/scala/MatrixMultiplication.scala:45:26, :49:28, :106:28
      if (_GEN | ~_GEN_6 | waitMem | _GEN_12) begin	// src/main/scala/MatrixMultiplication.scala:45:26, :77:24, :90:17, :100:35, :102:23, :106:28
      end
      else	// src/main/scala/MatrixMultiplication.scala:45:26, :90:17
        bufferRow_6 <= _memoryModule_io_dataOut[7:0];	// src/main/scala/MatrixMultiplication.scala:45:26, :49:28, :106:28
      if (_GEN | ~_GEN_6 | waitMem | _GEN_13) begin	// src/main/scala/MatrixMultiplication.scala:45:26, :77:24, :90:17, :100:35, :102:23, :106:28
      end
      else	// src/main/scala/MatrixMultiplication.scala:45:26, :90:17
        bufferRow_7 <= _memoryModule_io_dataOut[7:0];	// src/main/scala/MatrixMultiplication.scala:45:26, :49:28, :106:28
      if (_GEN | ~_GEN_6 | waitMem | _GEN_14) begin	// src/main/scala/MatrixMultiplication.scala:45:26, :77:24, :90:17, :100:35, :102:23, :106:28
      end
      else	// src/main/scala/MatrixMultiplication.scala:45:26, :90:17
        bufferRow_8 <= _memoryModule_io_dataOut[7:0];	// src/main/scala/MatrixMultiplication.scala:45:26, :49:28, :106:28
      if (_GEN | ~_GEN_6 | waitMem | _GEN_15) begin	// src/main/scala/MatrixMultiplication.scala:45:26, :77:24, :90:17, :100:35, :102:23, :106:28
      end
      else	// src/main/scala/MatrixMultiplication.scala:45:26, :90:17
        bufferRow_9 <= _memoryModule_io_dataOut[7:0];	// src/main/scala/MatrixMultiplication.scala:45:26, :49:28, :106:28
      if (_GEN | ~_GEN_6 | waitMem | _GEN_16) begin	// src/main/scala/MatrixMultiplication.scala:45:26, :77:24, :90:17, :100:35, :102:23, :106:28
      end
      else	// src/main/scala/MatrixMultiplication.scala:45:26, :90:17
        bufferRow_10 <= _memoryModule_io_dataOut[7:0];	// src/main/scala/MatrixMultiplication.scala:45:26, :49:28, :106:28
      if (_GEN | ~_GEN_6 | waitMem | _GEN_17) begin	// src/main/scala/MatrixMultiplication.scala:45:26, :77:24, :90:17, :100:35, :102:23, :106:28
      end
      else	// src/main/scala/MatrixMultiplication.scala:45:26, :90:17
        bufferRow_11 <= _memoryModule_io_dataOut[7:0];	// src/main/scala/MatrixMultiplication.scala:45:26, :49:28, :106:28
      if (_GEN | ~_GEN_6 | waitMem | _GEN_18) begin	// src/main/scala/MatrixMultiplication.scala:45:26, :77:24, :90:17, :100:35, :102:23, :106:28
      end
      else	// src/main/scala/MatrixMultiplication.scala:45:26, :90:17
        bufferRow_12 <= _memoryModule_io_dataOut[7:0];	// src/main/scala/MatrixMultiplication.scala:45:26, :49:28, :106:28
      if (_GEN | ~_GEN_6 | waitMem | _GEN_19) begin	// src/main/scala/MatrixMultiplication.scala:45:26, :77:24, :90:17, :100:35, :102:23, :106:28
      end
      else	// src/main/scala/MatrixMultiplication.scala:45:26, :90:17
        bufferRow_13 <= _memoryModule_io_dataOut[7:0];	// src/main/scala/MatrixMultiplication.scala:45:26, :49:28, :106:28
      if (_GEN | ~_GEN_6 | waitMem | _GEN_20) begin	// src/main/scala/MatrixMultiplication.scala:45:26, :77:24, :90:17, :100:35, :102:23, :106:28
      end
      else	// src/main/scala/MatrixMultiplication.scala:45:26, :90:17
        bufferRow_14 <= _memoryModule_io_dataOut[7:0];	// src/main/scala/MatrixMultiplication.scala:45:26, :49:28, :106:28
      if (_GEN | ~_GEN_6 | waitMem | ~(&index)) begin	// src/main/scala/MatrixMultiplication.scala:45:26, :76:22, :77:24, :90:17, :100:35, :102:23, :106:28
      end
      else	// src/main/scala/MatrixMultiplication.scala:45:26, :90:17
        bufferRow_15 <= _memoryModule_io_dataOut[7:0];	// src/main/scala/MatrixMultiplication.scala:45:26, :49:28, :106:28
      if (_GEN | ~_GEN_21 | waitMem | (|index)) begin	// src/main/scala/MatrixMultiplication.scala:46:26, :76:22, :77:24, :90:17, :106:28, :116:35, :118:23
      end
      else	// src/main/scala/MatrixMultiplication.scala:46:26, :90:17
        bufferCol_0 <= _memoryModule_io_dataOut[7:0];	// src/main/scala/MatrixMultiplication.scala:46:26, :49:28, :106:28
      if (_GEN | ~_GEN_21 | waitMem | _GEN_7) begin	// src/main/scala/MatrixMultiplication.scala:46:26, :77:24, :90:17, :106:28, :116:35, :118:23
      end
      else	// src/main/scala/MatrixMultiplication.scala:46:26, :90:17
        bufferCol_1 <= _memoryModule_io_dataOut[7:0];	// src/main/scala/MatrixMultiplication.scala:46:26, :49:28, :106:28
      if (_GEN | ~_GEN_21 | waitMem | _GEN_8) begin	// src/main/scala/MatrixMultiplication.scala:46:26, :77:24, :90:17, :106:28, :116:35, :118:23
      end
      else	// src/main/scala/MatrixMultiplication.scala:46:26, :90:17
        bufferCol_2 <= _memoryModule_io_dataOut[7:0];	// src/main/scala/MatrixMultiplication.scala:46:26, :49:28, :106:28
      if (_GEN | ~_GEN_21 | waitMem | _GEN_9) begin	// src/main/scala/MatrixMultiplication.scala:46:26, :77:24, :90:17, :106:28, :116:35, :118:23
      end
      else	// src/main/scala/MatrixMultiplication.scala:46:26, :90:17
        bufferCol_3 <= _memoryModule_io_dataOut[7:0];	// src/main/scala/MatrixMultiplication.scala:46:26, :49:28, :106:28
      if (_GEN | ~_GEN_21 | waitMem | _GEN_10) begin	// src/main/scala/MatrixMultiplication.scala:46:26, :77:24, :90:17, :106:28, :116:35, :118:23
      end
      else	// src/main/scala/MatrixMultiplication.scala:46:26, :90:17
        bufferCol_4 <= _memoryModule_io_dataOut[7:0];	// src/main/scala/MatrixMultiplication.scala:46:26, :49:28, :106:28
      if (_GEN | ~_GEN_21 | waitMem | _GEN_11) begin	// src/main/scala/MatrixMultiplication.scala:46:26, :77:24, :90:17, :106:28, :116:35, :118:23
      end
      else	// src/main/scala/MatrixMultiplication.scala:46:26, :90:17
        bufferCol_5 <= _memoryModule_io_dataOut[7:0];	// src/main/scala/MatrixMultiplication.scala:46:26, :49:28, :106:28
      if (_GEN | ~_GEN_21 | waitMem | _GEN_12) begin	// src/main/scala/MatrixMultiplication.scala:46:26, :77:24, :90:17, :106:28, :116:35, :118:23
      end
      else	// src/main/scala/MatrixMultiplication.scala:46:26, :90:17
        bufferCol_6 <= _memoryModule_io_dataOut[7:0];	// src/main/scala/MatrixMultiplication.scala:46:26, :49:28, :106:28
      if (_GEN | ~_GEN_21 | waitMem | _GEN_13) begin	// src/main/scala/MatrixMultiplication.scala:46:26, :77:24, :90:17, :106:28, :116:35, :118:23
      end
      else	// src/main/scala/MatrixMultiplication.scala:46:26, :90:17
        bufferCol_7 <= _memoryModule_io_dataOut[7:0];	// src/main/scala/MatrixMultiplication.scala:46:26, :49:28, :106:28
      if (_GEN | ~_GEN_21 | waitMem | _GEN_14) begin	// src/main/scala/MatrixMultiplication.scala:46:26, :77:24, :90:17, :106:28, :116:35, :118:23
      end
      else	// src/main/scala/MatrixMultiplication.scala:46:26, :90:17
        bufferCol_8 <= _memoryModule_io_dataOut[7:0];	// src/main/scala/MatrixMultiplication.scala:46:26, :49:28, :106:28
      if (_GEN | ~_GEN_21 | waitMem | _GEN_15) begin	// src/main/scala/MatrixMultiplication.scala:46:26, :77:24, :90:17, :106:28, :116:35, :118:23
      end
      else	// src/main/scala/MatrixMultiplication.scala:46:26, :90:17
        bufferCol_9 <= _memoryModule_io_dataOut[7:0];	// src/main/scala/MatrixMultiplication.scala:46:26, :49:28, :106:28
      if (_GEN | ~_GEN_21 | waitMem | _GEN_16) begin	// src/main/scala/MatrixMultiplication.scala:46:26, :77:24, :90:17, :106:28, :116:35, :118:23
      end
      else	// src/main/scala/MatrixMultiplication.scala:46:26, :90:17
        bufferCol_10 <= _memoryModule_io_dataOut[7:0];	// src/main/scala/MatrixMultiplication.scala:46:26, :49:28, :106:28
      if (_GEN | ~_GEN_21 | waitMem | _GEN_17) begin	// src/main/scala/MatrixMultiplication.scala:46:26, :77:24, :90:17, :106:28, :116:35, :118:23
      end
      else	// src/main/scala/MatrixMultiplication.scala:46:26, :90:17
        bufferCol_11 <= _memoryModule_io_dataOut[7:0];	// src/main/scala/MatrixMultiplication.scala:46:26, :49:28, :106:28
      if (_GEN | ~_GEN_21 | waitMem | _GEN_18) begin	// src/main/scala/MatrixMultiplication.scala:46:26, :77:24, :90:17, :106:28, :116:35, :118:23
      end
      else	// src/main/scala/MatrixMultiplication.scala:46:26, :90:17
        bufferCol_12 <= _memoryModule_io_dataOut[7:0];	// src/main/scala/MatrixMultiplication.scala:46:26, :49:28, :106:28
      if (_GEN | ~_GEN_21 | waitMem | _GEN_19) begin	// src/main/scala/MatrixMultiplication.scala:46:26, :77:24, :90:17, :106:28, :116:35, :118:23
      end
      else	// src/main/scala/MatrixMultiplication.scala:46:26, :90:17
        bufferCol_13 <= _memoryModule_io_dataOut[7:0];	// src/main/scala/MatrixMultiplication.scala:46:26, :49:28, :106:28
      if (_GEN | ~_GEN_21 | waitMem | _GEN_20) begin	// src/main/scala/MatrixMultiplication.scala:46:26, :77:24, :90:17, :106:28, :116:35, :118:23
      end
      else	// src/main/scala/MatrixMultiplication.scala:46:26, :90:17
        bufferCol_14 <= _memoryModule_io_dataOut[7:0];	// src/main/scala/MatrixMultiplication.scala:46:26, :49:28, :106:28
      if (_GEN | ~_GEN_21 | waitMem | ~(&index)) begin	// src/main/scala/MatrixMultiplication.scala:45:26, :46:26, :76:22, :77:24, :90:17, :102:23, :106:28, :116:35, :118:23
      end
      else	// src/main/scala/MatrixMultiplication.scala:46:26, :90:17
        bufferCol_15 <= _memoryModule_io_dataOut[7:0];	// src/main/scala/MatrixMultiplication.scala:46:26, :49:28, :106:28
      _GEN_22 =
        {{2'h0},
         {{(&currentCol) & (&currentRow), 1'h1}},
         {~loadState | waitMem | ~(&index) ? state : 2'h2},
         {io_start ? 2'h1 : state}};	// src/main/scala/MatrixMultiplication.scala:45:26, :71:22, :72:27, :73:27, :75:26, :76:22, :77:24, :82:28, :90:17, :93:22, :94:15, :100:35, :102:23, :105:19, :106:28, :116:35, :118:23, :140:{23,48}, :143:{25,50}, :145:17, :148:17, :153:15, :159:13
      state <= _GEN_22[state];	// src/main/scala/MatrixMultiplication.scala:71:22, :90:17, :93:22, :116:35, :140:48, :159:13
      if (_GEN_3 | ~(_GEN_2 & (&currentCol))) begin	// src/main/scala/MatrixMultiplication.scala:72:27, :73:27, :80:26, :90:17, :140:{23,48}, :143:50
      end
      else if (&currentRow)	// src/main/scala/MatrixMultiplication.scala:72:27, :143:25
        currentRow <= 4'h0;	// <stdin>:265:3, src/main/scala/MatrixMultiplication.scala:72:27
      else	// src/main/scala/MatrixMultiplication.scala:143:25
        currentRow <= currentRow + 4'h1;	// <stdin>:265:3, src/main/scala/MatrixMultiplication.scala:72:27, :147:36
      if (_GEN_4) begin	// src/main/scala/MatrixMultiplication.scala:73:27, :80:26, :90:17
      end
      else if (&currentCol)	// src/main/scala/MatrixMultiplication.scala:73:27, :140:23
        currentCol <= 4'h0;	// <stdin>:265:3, src/main/scala/MatrixMultiplication.scala:73:27
      else	// src/main/scala/MatrixMultiplication.scala:140:23
        currentCol <= currentCol + 4'h1;	// <stdin>:265:3, src/main/scala/MatrixMultiplication.scala:73:27, :152:34
      _GEN_23 =
        {{loadState},
         {~(&currentCol)},
         {~loadState & ~waitMem & (&index) | loadState},
         {loadState}};	// src/main/scala/MatrixMultiplication.scala:73:27, :75:26, :76:22, :77:24, :90:17, :100:35, :102:23, :105:19, :106:28, :107:47, :140:{23,48}, :141:19, :151:19
      loadState <= _GEN_23[state];	// src/main/scala/MatrixMultiplication.scala:71:22, :75:26, :90:17, :100:35, :140:48
      if (_GEN | ~_GEN_0) begin	// src/main/scala/MatrixMultiplication.scala:77:24, :90:17
      end
      else if (loadState) begin	// src/main/scala/MatrixMultiplication.scala:75:26
        if (waitMem) begin	// src/main/scala/MatrixMultiplication.scala:77:24
        end
        else if (&index)	// src/main/scala/MatrixMultiplication.scala:76:22, :106:28
          index <= 4'h0;	// <stdin>:265:3, src/main/scala/MatrixMultiplication.scala:76:22
        else	// src/main/scala/MatrixMultiplication.scala:106:28
          index <= index + 4'h1;	// <stdin>:265:3, src/main/scala/MatrixMultiplication.scala:76:22, :127:28
        waitMem <= ~waitMem;	// src/main/scala/MatrixMultiplication.scala:75:26, :77:24, :102:23, :103:19, :105:19
      end
      else begin	// src/main/scala/MatrixMultiplication.scala:75:26
        if (loadState | waitMem) begin	// src/main/scala/MatrixMultiplication.scala:75:26, :76:22, :77:24, :100:35, :102:23
        end
        else if (&index)	// src/main/scala/MatrixMultiplication.scala:76:22, :106:28
          index <= 4'h0;	// <stdin>:265:3, src/main/scala/MatrixMultiplication.scala:76:22
        else	// src/main/scala/MatrixMultiplication.scala:106:28
          index <= index + 4'h1;	// <stdin>:265:3, src/main/scala/MatrixMultiplication.scala:76:22, :111:28
        waitMem <= loadState ^ ~waitMem;	// src/main/scala/MatrixMultiplication.scala:75:26, :77:24, :100:35, :102:23
      end
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// <stdin>:265:3
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:265:3
      `FIRRTL_BEFORE_INITIAL	// <stdin>:265:3
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:265:3
      automatic logic [31:0] _RANDOM[0:8];	// <stdin>:265:3
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:265:3
        `INIT_RANDOM_PROLOG_	// <stdin>:265:3
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:265:3
        for (logic [3:0] i = 4'h0; i < 4'h9; i += 4'h1) begin
          _RANDOM[i] = `RANDOM;	// <stdin>:265:3
        end	// <stdin>:265:3
        bufferRow_0 = _RANDOM[4'h0][7:0];	// <stdin>:265:3, src/main/scala/MatrixMultiplication.scala:45:26
        bufferRow_1 = _RANDOM[4'h0][15:8];	// <stdin>:265:3, src/main/scala/MatrixMultiplication.scala:45:26
        bufferRow_2 = _RANDOM[4'h0][23:16];	// <stdin>:265:3, src/main/scala/MatrixMultiplication.scala:45:26
        bufferRow_3 = _RANDOM[4'h0][31:24];	// <stdin>:265:3, src/main/scala/MatrixMultiplication.scala:45:26
        bufferRow_4 = _RANDOM[4'h1][7:0];	// <stdin>:265:3, src/main/scala/MatrixMultiplication.scala:45:26
        bufferRow_5 = _RANDOM[4'h1][15:8];	// <stdin>:265:3, src/main/scala/MatrixMultiplication.scala:45:26
        bufferRow_6 = _RANDOM[4'h1][23:16];	// <stdin>:265:3, src/main/scala/MatrixMultiplication.scala:45:26
        bufferRow_7 = _RANDOM[4'h1][31:24];	// <stdin>:265:3, src/main/scala/MatrixMultiplication.scala:45:26
        bufferRow_8 = _RANDOM[4'h2][7:0];	// <stdin>:265:3, src/main/scala/MatrixMultiplication.scala:45:26
        bufferRow_9 = _RANDOM[4'h2][15:8];	// <stdin>:265:3, src/main/scala/MatrixMultiplication.scala:45:26
        bufferRow_10 = _RANDOM[4'h2][23:16];	// <stdin>:265:3, src/main/scala/MatrixMultiplication.scala:45:26
        bufferRow_11 = _RANDOM[4'h2][31:24];	// <stdin>:265:3, src/main/scala/MatrixMultiplication.scala:45:26
        bufferRow_12 = _RANDOM[4'h3][7:0];	// <stdin>:265:3, src/main/scala/MatrixMultiplication.scala:45:26
        bufferRow_13 = _RANDOM[4'h3][15:8];	// <stdin>:265:3, src/main/scala/MatrixMultiplication.scala:45:26
        bufferRow_14 = _RANDOM[4'h3][23:16];	// <stdin>:265:3, src/main/scala/MatrixMultiplication.scala:45:26
        bufferRow_15 = _RANDOM[4'h3][31:24];	// <stdin>:265:3, src/main/scala/MatrixMultiplication.scala:45:26
        bufferCol_0 = _RANDOM[4'h4][7:0];	// <stdin>:265:3, src/main/scala/MatrixMultiplication.scala:46:26
        bufferCol_1 = _RANDOM[4'h4][15:8];	// <stdin>:265:3, src/main/scala/MatrixMultiplication.scala:46:26
        bufferCol_2 = _RANDOM[4'h4][23:16];	// <stdin>:265:3, src/main/scala/MatrixMultiplication.scala:46:26
        bufferCol_3 = _RANDOM[4'h4][31:24];	// <stdin>:265:3, src/main/scala/MatrixMultiplication.scala:46:26
        bufferCol_4 = _RANDOM[4'h5][7:0];	// <stdin>:265:3, src/main/scala/MatrixMultiplication.scala:46:26
        bufferCol_5 = _RANDOM[4'h5][15:8];	// <stdin>:265:3, src/main/scala/MatrixMultiplication.scala:46:26
        bufferCol_6 = _RANDOM[4'h5][23:16];	// <stdin>:265:3, src/main/scala/MatrixMultiplication.scala:46:26
        bufferCol_7 = _RANDOM[4'h5][31:24];	// <stdin>:265:3, src/main/scala/MatrixMultiplication.scala:46:26
        bufferCol_8 = _RANDOM[4'h6][7:0];	// <stdin>:265:3, src/main/scala/MatrixMultiplication.scala:46:26
        bufferCol_9 = _RANDOM[4'h6][15:8];	// <stdin>:265:3, src/main/scala/MatrixMultiplication.scala:46:26
        bufferCol_10 = _RANDOM[4'h6][23:16];	// <stdin>:265:3, src/main/scala/MatrixMultiplication.scala:46:26
        bufferCol_11 = _RANDOM[4'h6][31:24];	// <stdin>:265:3, src/main/scala/MatrixMultiplication.scala:46:26
        bufferCol_12 = _RANDOM[4'h7][7:0];	// <stdin>:265:3, src/main/scala/MatrixMultiplication.scala:46:26
        bufferCol_13 = _RANDOM[4'h7][15:8];	// <stdin>:265:3, src/main/scala/MatrixMultiplication.scala:46:26
        bufferCol_14 = _RANDOM[4'h7][23:16];	// <stdin>:265:3, src/main/scala/MatrixMultiplication.scala:46:26
        bufferCol_15 = _RANDOM[4'h7][31:24];	// <stdin>:265:3, src/main/scala/MatrixMultiplication.scala:46:26
        state = _RANDOM[4'h8][1:0];	// <stdin>:265:3, src/main/scala/MatrixMultiplication.scala:71:22
        currentRow = _RANDOM[4'h8][5:2];	// <stdin>:265:3, src/main/scala/MatrixMultiplication.scala:71:22, :72:27
        currentCol = _RANDOM[4'h8][9:6];	// <stdin>:265:3, src/main/scala/MatrixMultiplication.scala:71:22, :73:27
        loadState = _RANDOM[4'h8][10];	// <stdin>:265:3, src/main/scala/MatrixMultiplication.scala:71:22, :75:26
        index = _RANDOM[4'h8][14:11];	// <stdin>:265:3, src/main/scala/MatrixMultiplication.scala:71:22, :76:22
        waitMem = _RANDOM[4'h8][15];	// <stdin>:265:3, src/main/scala/MatrixMultiplication.scala:71:22, :77:24
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:265:3
      `FIRRTL_AFTER_INITIAL	// <stdin>:265:3
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  MemoryModule memoryModule (	// src/main/scala/MatrixMultiplication.scala:49:28
    .clock          (clock),
    .reset          (reset),
    .io_dataIn      (_GEN_4 ? {24'h0, io_dataIn} : _vecDotProductModule_io_result),	// src/main/scala/MatrixMultiplication.scala:57:35, :80:26, :90:17
    .io_address     (_GEN_5[state]),	// src/main/scala/MatrixMultiplication.scala:71:22, :81:27, :90:17, :116:35, :135:31
    .io_dataSize    (_GEN ? 2'h2 : {~_GEN_0, 1'h0}),	// src/main/scala/MatrixMultiplication.scala:75:26, :77:24, :82:28, :90:17, :98:32
    .io_writeEnable (~_GEN_3 & _GEN_2 | io_writeEnable),	// src/main/scala/MatrixMultiplication.scala:80:26, :83:31, :90:17
    .io_dataOut     (_memoryModule_io_dataOut)
  );
  VecDotProductModule vecDotProductModule (	// src/main/scala/MatrixMultiplication.scala:57:35
    .io_vecA_0  (bufferRow_0),	// src/main/scala/MatrixMultiplication.scala:45:26
    .io_vecA_1  (bufferRow_1),	// src/main/scala/MatrixMultiplication.scala:45:26
    .io_vecA_2  (bufferRow_2),	// src/main/scala/MatrixMultiplication.scala:45:26
    .io_vecA_3  (bufferRow_3),	// src/main/scala/MatrixMultiplication.scala:45:26
    .io_vecA_4  (bufferRow_4),	// src/main/scala/MatrixMultiplication.scala:45:26
    .io_vecA_5  (bufferRow_5),	// src/main/scala/MatrixMultiplication.scala:45:26
    .io_vecA_6  (bufferRow_6),	// src/main/scala/MatrixMultiplication.scala:45:26
    .io_vecA_7  (bufferRow_7),	// src/main/scala/MatrixMultiplication.scala:45:26
    .io_vecA_8  (bufferRow_8),	// src/main/scala/MatrixMultiplication.scala:45:26
    .io_vecA_9  (bufferRow_9),	// src/main/scala/MatrixMultiplication.scala:45:26
    .io_vecA_10 (bufferRow_10),	// src/main/scala/MatrixMultiplication.scala:45:26
    .io_vecA_11 (bufferRow_11),	// src/main/scala/MatrixMultiplication.scala:45:26
    .io_vecA_12 (bufferRow_12),	// src/main/scala/MatrixMultiplication.scala:45:26
    .io_vecA_13 (bufferRow_13),	// src/main/scala/MatrixMultiplication.scala:45:26
    .io_vecA_14 (bufferRow_14),	// src/main/scala/MatrixMultiplication.scala:45:26
    .io_vecA_15 (bufferRow_15),	// src/main/scala/MatrixMultiplication.scala:45:26
    .io_vecB_0  (bufferCol_0),	// src/main/scala/MatrixMultiplication.scala:46:26
    .io_vecB_1  (bufferCol_1),	// src/main/scala/MatrixMultiplication.scala:46:26
    .io_vecB_2  (bufferCol_2),	// src/main/scala/MatrixMultiplication.scala:46:26
    .io_vecB_3  (bufferCol_3),	// src/main/scala/MatrixMultiplication.scala:46:26
    .io_vecB_4  (bufferCol_4),	// src/main/scala/MatrixMultiplication.scala:46:26
    .io_vecB_5  (bufferCol_5),	// src/main/scala/MatrixMultiplication.scala:46:26
    .io_vecB_6  (bufferCol_6),	// src/main/scala/MatrixMultiplication.scala:46:26
    .io_vecB_7  (bufferCol_7),	// src/main/scala/MatrixMultiplication.scala:46:26
    .io_vecB_8  (bufferCol_8),	// src/main/scala/MatrixMultiplication.scala:46:26
    .io_vecB_9  (bufferCol_9),	// src/main/scala/MatrixMultiplication.scala:46:26
    .io_vecB_10 (bufferCol_10),	// src/main/scala/MatrixMultiplication.scala:46:26
    .io_vecB_11 (bufferCol_11),	// src/main/scala/MatrixMultiplication.scala:46:26
    .io_vecB_12 (bufferCol_12),	// src/main/scala/MatrixMultiplication.scala:46:26
    .io_vecB_13 (bufferCol_13),	// src/main/scala/MatrixMultiplication.scala:46:26
    .io_vecB_14 (bufferCol_14),	// src/main/scala/MatrixMultiplication.scala:46:26
    .io_vecB_15 (bufferCol_15),	// src/main/scala/MatrixMultiplication.scala:46:26
    .io_result  (_vecDotProductModule_io_result)
  );
  assign io_finish = ~(_GEN | _GEN_0 | _GEN_2) & (&state);	// <stdin>:265:3, src/main/scala/MatrixMultiplication.scala:71:22, :86:13, :90:17
  assign io_dataOut = _memoryModule_io_dataOut;	// <stdin>:265:3, src/main/scala/MatrixMultiplication.scala:49:28
endmodule

module MMTopModule(	// <stdin>:455:3
  input         clock,	// <stdin>:456:11
                reset,	// <stdin>:457:11
                io_operation,	// src/main/scala/MMTop.scala:27:14
  input  [8:0]  io_dataIn,	// src/main/scala/MMTop.scala:27:14
  input  [31:0] io_address,	// src/main/scala/MMTop.scala:27:14
  input         io_enable,	// src/main/scala/MMTop.scala:27:14
                io_writeEnable,	// src/main/scala/MMTop.scala:27:14
                io_start,	// src/main/scala/MMTop.scala:27:14
  output [31:0] io_dataOut,	// src/main/scala/MMTop.scala:27:14
  output        io_busy	// src/main/scala/MMTop.scala:27:14
);

  wire _matrixMultiplicationModule_io_finish;	// src/main/scala/MMTop.scala:43:42
  MatrixMultiplicationModule matrixMultiplicationModule (	// src/main/scala/MMTop.scala:43:42
    .clock          (clock),
    .reset          (reset),
    .io_start       (io_operation & io_start),	// src/main/scala/MMTop.scala:59:77
    .io_dataIn      (io_dataIn[7:0]),	// src/main/scala/MMTop.scala:60:{40,53}
    .io_address     (io_address),
    .io_writeEnable (~io_operation & io_enable & io_writeEnable),	// src/main/scala/MMTop.scala:62:{62,97}
    .io_finish      (_matrixMultiplicationModule_io_finish),
    .io_dataOut     (io_dataOut)
  );
  assign io_busy = ~_matrixMultiplicationModule_io_finish;	// <stdin>:455:3, src/main/scala/MMTop.scala:43:42, :64:14
endmodule

module FPGAShell(	// <stdin>:477:3
  input  clock,	// <stdin>:478:11
         reset,	// <stdin>:479:11
         io_start,	// src/main/scala/verilog/Shell.scala:47:14
         io_check,	// src/main/scala/verilog/Shell.scala:47:14
  output io_finish,	// src/main/scala/verilog/Shell.scala:47:14
         io_correct	// src/main/scala/verilog/Shell.scala:47:14
);

  wire [31:0]         _dut_io_dataOut;	// src/main/scala/verilog/Shell.scala:72:19
  wire                _dut_io_busy;	// src/main/scala/verilog/Shell.scala:72:19
  wire [1023:0][31:0] _GEN =
    {32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hA8,
     32'hFFFDDA3F,
     32'hFFFE98B1,
     32'hFFFDBF1D,
     32'hFFFD7B6C,
     32'hFFFDF896,
     32'hFFFD89DD,
     32'hFFFE0995,
     32'hFFFD81E1,
     32'hFFFD9156,
     32'hFFFDF714,
     32'hFFFD6AA1,
     32'hFFFDA9FA,
     32'hFFFDA69F,
     32'hFFFDE479,
     32'hFFFCF359,
     32'hFFFD7C87,
     32'hFFFDDDC7,
     32'hFFFE514C,
     32'hFFFDC5B0,
     32'hFFFDFDA5,
     32'hFFFE35E5,
     32'hFFFD91D9,
     32'hFFFE1B9A,
     32'hFFFDB7B0,
     32'hFFFD76B2,
     32'hFFFE0D40,
     32'hFFFD6FA7,
     32'hFFFD9AC0,
     32'hFFFDC0AA,
     32'hFFFE0165,
     32'hFFFD29A9,
     32'hFFFD597E,
     32'hFFFD6D28,
     32'hFFFE82B6,
     32'hFFFDCCF5,
     32'hFFFD9385,
     32'hFFFE5F52,
     32'hFFFE2F87,
     32'hFFFDFFB8,
     32'hFFFDBB9F,
     32'hFFFD585B,
     32'hFFFDE31B,
     32'hFFFD234D,
     32'hFFFDB244,
     32'hFFFE05B8,
     32'hFFFDF608,
     32'hFFFCFA1D,
     32'hFFFDA45C,
     32'hFFFDCBFE,
     32'hFFFE97F3,
     32'hFFFDC500,
     32'hFFFE06C3,
     32'hFFFE484F,
     32'hFFFDB751,
     32'hFFFE4181,
     32'hFFFDE298,
     32'hFFFDD93D,
     32'hFFFDD6D7,
     32'hFFFD9540,
     32'hFFFD925D,
     32'hFFFDB489,
     32'hFFFE3C57,
     32'hFFFD129A,
     32'hFFFDBFF9,
     32'hFFFD9AA3,
     32'hFFFE72A8,
     32'hFFFDF6C4,
     32'hFFFDDDB0,
     32'hFFFE43AA,
     32'hFFFDD97A,
     32'hFFFE27A4,
     32'hFFFDC97F,
     32'hFFFE0859,
     32'hFFFE0CB0,
     32'hFFFD878C,
     32'hFFFDC785,
     32'hFFFDA734,
     32'hFFFE1BC1,
     32'hFFFD3802,
     32'hFFFDE6E9,
     32'hFFFD85E1,
     32'hFFFEA604,
     32'hFFFDAE7A,
     32'hFFFD3D8A,
     32'hFFFDE506,
     32'hFFFD90AB,
     32'hFFFE5C01,
     32'hFFFD6D8E,
     32'hFFFD3F71,
     32'hFFFDA1AC,
     32'hFFFD11BA,
     32'hFFFD6173,
     32'hFFFDB087,
     32'hFFFDCCAE,
     32'hFFFCADBD,
     32'hFFFD2657,
     32'hFFFDCA69,
     32'hFFFE8DAD,
     32'hFFFE02F8,
     32'hFFFE028B,
     32'hFFFE5FA3,
     32'hFFFDFD18,
     32'hFFFE4A79,
     32'hFFFDDDEE,
     32'hFFFDC981,
     32'hFFFE80F6,
     32'hFFFDC3E1,
     32'hFFFDFE9F,
     32'hFFFDEE38,
     32'hFFFE1246,
     32'hFFFD6F01,
     32'hFFFDE7E2,
     32'hFFFE24AC,
     32'hFFFED0E2,
     32'hFFFE3DA2,
     32'hFFFE4416,
     32'hFFFE81BB,
     32'hFFFE4221,
     32'hFFFE9C9F,
     32'hFFFE2142,
     32'hFFFE03DF,
     32'hFFFE9125,
     32'hFFFDC609,
     32'hFFFDFF3A,
     32'hFFFE324F,
     32'hFFFE58A4,
     32'hFFFD8339,
     32'hFFFDA95D,
     32'hFFFDB477,
     32'hFFFE54F7,
     32'hFFFDD429,
     32'hFFFDFDFC,
     32'hFFFE3B1D,
     32'hFFFDF587,
     32'hFFFE5A02,
     32'hFFFDBD1C,
     32'hFFFD9E70,
     32'hFFFE192A,
     32'hFFFD90B4,
     32'hFFFDE240,
     32'hFFFDB2B3,
     32'hFFFDEB55,
     32'hFFFD37F6,
     32'hFFFDA7F4,
     32'hFFFD9655,
     32'hFFFEAED7,
     32'hFFFDC551,
     32'hFFFDB416,
     32'hFFFE33D9,
     32'hFFFDAE52,
     32'hFFFE19A5,
     32'hFFFDCB40,
     32'hFFFD730D,
     32'hFFFE17B6,
     32'hFFFD6668,
     32'hFFFD9E04,
     32'hFFFDEB0F,
     32'hFFFDE987,
     32'hFFFCBD77,
     32'hFFFD6EEF,
     32'hFFFD61C3,
     32'hFFFE73C3,
     32'hFFFDF932,
     32'hFFFDF152,
     32'hFFFE2D6C,
     32'hFFFDFE29,
     32'hFFFE93C3,
     32'hFFFDEBCA,
     32'hFFFD801F,
     32'hFFFE00B4,
     32'hFFFD9DA3,
     32'hFFFDA349,
     32'hFFFDD741,
     32'hFFFDE551,
     32'hFFFD3A66,
     32'hFFFDA373,
     32'hFFFE5F76,
     32'hFFFEA8E5,
     32'hFFFE01DD,
     32'hFFFEA2B0,
     32'hFFFEA4DC,
     32'hFFFE7A09,
     32'hFFFE8B76,
     32'hFFFE3D8F,
     32'hFFFE36EC,
     32'hFFFE5B6A,
     32'hFFFE18F0,
     32'hFFFE099B,
     32'hFFFE2B94,
     32'hFFFE8D18,
     32'hFFFDE8C7,
     32'hFFFE29C2,
     32'hFFFDCA42,
     32'hFFFE773F,
     32'hFFFDD6CE,
     32'hFFFDD4F2,
     32'hFFFE3FFF,
     32'hFFFDB45B,
     32'hFFFE46D8,
     32'hFFFDB480,
     32'hFFFDA4B4,
     32'hFFFDF550,
     32'hFFFD737E,
     32'hFFFDB989,
     32'hFFFDD051,
     32'hFFFDEB69,
     32'hFFFD04A8,
     32'hFFFD6F66,
     32'hFFFD7EEC,
     32'hFFFE6418,
     32'hFFFD5B22,
     32'hFFFD8111,
     32'hFFFDE9E2,
     32'hFFFD973E,
     32'hFFFDD053,
     32'hFFFD579F,
     32'hFFFD1755,
     32'hFFFDE7AB,
     32'hFFFD40CF,
     32'hFFFD0732,
     32'hFFFD6BD8,
     32'hFFFDA45D,
     32'hFFFCA013,
     32'hFFFCDA6A,
     32'hFFFE1E79,
     32'hFFFEA738,
     32'hFFFE4413,
     32'hFFFE701C,
     32'hFFFED30A,
     32'hFFFEB62A,
     32'hFFFE6B38,
     32'hFFFE2EE1,
     32'hFFFE2247,
     32'hFFFEA9C8,
     32'hFFFDDED6,
     32'hFFFE5160,
     32'hFFFE3A47,
     32'hFFFE8D54,
     32'hFFFDCD8C,
     32'hFFFE48D6,
     32'hFFFD6639,
     32'hFFFE7430,
     32'hFFFDBF23,
     32'hFFFD52D2,
     32'hFFFDD73D,
     32'hFFFDABA0,
     32'hFFFE3736,
     32'hFFFD8EEA,
     32'hFFFD698D,
     32'hFFFDA1D3,
     32'hFFFD36D2,
     32'hFFFD7D24,
     32'hFFFD8246,
     32'hFFFDAEE7,
     32'hFFFCE411,
     32'hFFFD492B,
     32'hFFFFFFC2,
     32'hFFFFFF94,
     32'hFFFFFFBA,
     32'hFFFFFFDB,
     32'hFFFFFFFD,
     32'hFFFFFFEE,
     32'hFFFFFF87,
     32'hFFFFFFA9,
     32'hFFFFFFAB,
     32'hFFFFFFF1,
     32'hFFFFFFC0,
     32'hFFFFFFD0,
     32'hFFFFFFE2,
     32'hFFFFFFAD,
     32'hFFFFFFC5,
     32'hFFFFFFB9,
     32'hFFFFFFC9,
     32'hFFFFFFF3,
     32'hFFFFFFDA,
     32'hFFFFFFEF,
     32'hFFFFFFD3,
     32'hFFFFFFBC,
     32'hFFFFFFF6,
     32'hFFFFFFFA,
     32'hFFFFFFFC,
     32'hFFFFFFB4,
     32'hFFFFFFEB,
     32'hFFFFFFD3,
     32'hFFFFFFF1,
     32'hFFFFFFB3,
     32'hFFFFFFAE,
     32'hFFFFFFDF,
     32'hFFFFFFBC,
     32'hFFFFFFEE,
     32'hFFFFFFEF,
     32'hFFFFFF85,
     32'hFFFFFFA3,
     32'hFFFFFFB0,
     32'hFFFFFFDF,
     32'hFFFFFFA9,
     32'hFFFFFFF1,
     32'hFFFFFFF2,
     32'hFFFFFFD0,
     32'hFFFFFFDB,
     32'hFFFFFF86,
     32'hFFFFFFB2,
     32'hFFFFFFD5,
     32'hFFFFFFCC,
     32'hFFFFFFD0,
     32'hFFFFFFF7,
     32'hFFFFFFCA,
     32'hFFFFFFD0,
     32'hFFFFFFD7,
     32'hFFFFFFAF,
     32'hFFFFFFEE,
     32'hFFFFFFB4,
     32'hFFFFFFD4,
     32'hFFFFFFC2,
     32'hFFFFFF9D,
     32'hFFFFFF94,
     32'hFFFFFF9F,
     32'hFFFFFFF5,
     32'hFFFFFF95,
     32'hFFFFFFAC,
     32'hFFFFFFFE,
     32'hFFFFFFB3,
     32'hFFFFFF97,
     32'hFFFFFFF2,
     32'hFFFFFFC3,
     32'hFFFFFFA7,
     32'hFFFFFFF0,
     32'hFFFFFF93,
     32'hFFFFFFBD,
     32'hFFFFFFF7,
     32'hFFFFFF98,
     32'hFFFFFFCF,
     32'hFFFFFF98,
     32'hFFFFFFDA,
     32'hFFFFFFC9,
     32'hFFFFFF96,
     32'hFFFFFFB8,
     32'hFFFFFFC5,
     32'hFFFFFF81,
     32'hFFFFFFED,
     32'hFFFFFFA7,
     32'hFFFFFFC2,
     32'hFFFFFFCA,
     32'hFFFFFFE5,
     32'hFFFFFFC3,
     32'hFFFFFF99,
     32'hFFFFFFC4,
     32'hFFFFFFA5,
     32'hFFFFFFCB,
     32'hFFFFFFDA,
     32'hFFFFFFCF,
     32'hFFFFFFFC,
     32'hFFFFFF96,
     32'hFFFFFFA5,
     32'hFFFFFFB7,
     32'hFFFFFFC3,
     32'hFFFFFFB4,
     32'hFFFFFF96,
     32'hFFFFFFAC,
     32'hFFFFFFCA,
     32'hFFFFFFA1,
     32'hFFFFFF87,
     32'hFFFFFF85,
     32'hFFFFFF8D,
     32'hFFFFFF89,
     32'hFFFFFFCC,
     32'hFFFFFFA1,
     32'hFFFFFF85,
     32'hFFFFFF81,
     32'hFFFFFFC3,
     32'hFFFFFFC6,
     32'hFFFFFF9A,
     32'hFFFFFFCC,
     32'hFFFFFFF7,
     32'hFFFFFFD5,
     32'hFFFFFFBE,
     32'hFFFFFFD3,
     32'hFFFFFF9C,
     32'hFFFFFF87,
     32'hFFFFFFC7,
     32'hFFFFFF8D,
     32'hFFFFFFB3,
     32'hFFFFFFA7,
     32'hFFFFFFBE,
     32'hFFFFFF8C,
     32'hFFFFFFF7,
     32'hFFFFFFC8,
     32'hFFFFFFCB,
     32'hFFFFFFC7,
     32'hFFFFFFA4,
     32'hFFFFFFEA,
     32'hFFFFFFE2,
     32'hFFFFFF87,
     32'hFFFFFFED,
     32'hFFFFFFD2,
     32'hFFFFFF8B,
     32'hFFFFFFFA,
     32'hFFFFFFC4,
     32'hFFFFFF94,
     32'hFFFFFFA4,
     32'hFFFFFFD0,
     32'hFFFFFFD0,
     32'hFFFFFFB2,
     32'hFFFFFFDB,
     32'hFFFFFFBF,
     32'hFFFFFFAE,
     32'hFFFFFFEE,
     32'hFFFFFFC1,
     32'hFFFFFF93,
     32'hFFFFFFB6,
     32'hFFFFFFF9,
     32'hFFFFFF9C,
     32'hFFFFFFB3,
     32'hFFFFFFA2,
     32'hFFFFFFAC,
     32'hFFFFFF94,
     32'hFFFFFFAC,
     32'hFFFFFFED,
     32'hFFFFFFF9,
     32'hFFFFFF8E,
     32'hFFFFFFF0,
     32'hFFFFFF88,
     32'hFFFFFFA0,
     32'hFFFFFFC9,
     32'hFFFFFFAC,
     32'hFFFFFFB7,
     32'hFFFFFF9A,
     32'hFFFFFFED,
     32'hFFFFFFF4,
     32'hFFFFFFD7,
     32'hFFFFFF8E,
     32'hFFFFFFF5,
     32'hFFFFFF83,
     32'hFFFFFFC2,
     32'hFFFFFF96,
     32'hFFFFFFD9,
     32'hFFFFFFE3,
     32'hFFFFFFED,
     32'hFFFFFF94,
     32'hFFFFFFB9,
     32'hFFFFFFB1,
     32'hFFFFFFF7,
     32'hFFFFFFE5,
     32'hFFFFFFB5,
     32'hFFFFFFA6,
     32'hFFFFFFAF,
     32'hFFFFFF95,
     32'hFFFFFFF1,
     32'hFFFFFF9A,
     32'hFFFFFFAA,
     32'hFFFFFFEA,
     32'hFFFFFF94,
     32'hFFFFFFBF,
     32'hFFFFFFCC,
     32'hFFFFFFF7,
     32'hFFFFFF83,
     32'hFFFFFF93,
     32'hFFFFFFD5,
     32'hFFFFFF8C,
     32'hFFFFFFE7,
     32'hFFFFFFA6,
     32'hFFFFFFCD,
     32'hFFFFFFB1,
     32'hFFFFFFBC,
     32'hFFFFFFEB,
     32'hFFFFFFEE,
     32'hFFFFFFBB,
     32'hFFFFFF83,
     32'hFFFFFFAE,
     32'hFFFFFF98,
     32'hFFFFFFAB,
     32'hFFFFFFA4,
     32'hFFFFFFED,
     32'hFFFFFFA4,
     32'hFFFFFFA2,
     32'hFFFFFFB0,
     32'hFFFFFFB1,
     32'hFFFFFFD5,
     32'hFFFFFF8D,
     32'hFFFFFF90,
     32'hFFFFFFDD,
     32'hFFFFFFE2,
     32'hFFFFFF9F,
     32'hFFFFFFCB,
     32'hFFFFFFEE,
     32'hFFFFFFFA,
     32'hFFFFFFE4,
     32'hFFFFFFAD,
     32'hFFFFFF9A,
     32'hFFFFFF88,
     32'hFFFFFF8B,
     32'hFFFFFF9A,
     32'hFFFFFFE8,
     32'hFFFFFFC9,
     32'hFFFFFF9A,
     32'hFFFFFF92,
     32'hFFFFFFE0,
     32'hFFFFFFFA,
     32'hFFFFFFBB,
     32'hFFFFFFAA,
     32'hFFFFFFCA,
     32'hFFFFFFFA,
     32'hFFFFFFA8,
     32'hFFFFFFC4,
     32'hFFFFFF90,
     32'hFFFFFFFB,
     32'hFFFFFFB2,
     32'hFFFFFFCB,
     32'hFFFFFFEE,
     32'hFFFFFFB3,
     32'hFFFFFFA1,
     32'hFFFFFF8A,
     32'h60,
     32'h79,
     32'hE3,
     32'h96,
     32'h89,
     32'hCC,
     32'h48,
     32'h20,
     32'h19,
     32'hF1,
     32'hF8,
     32'h7A,
     32'h85,
     32'hF5,
     32'h4D,
     32'hD7,
     32'hEB,
     32'h6D,
     32'h65,
     32'h9B,
     32'hE7,
     32'h86,
     32'hF6,
     32'h41,
     32'h6A,
     32'hF9,
     32'hCE,
     32'h28,
     32'h3D,
     32'h70,
     32'h1B,
     32'h8B,
     32'h91,
     32'h2A,
     32'h6A,
     32'h38,
     32'h36,
     32'hAB,
     32'h7A,
     32'hFA,
     32'hA7,
     32'h26,
     32'hF8,
     32'h91,
     32'h80,
     32'h5B,
     32'hFA,
     32'hCB,
     32'h18,
     32'h7F,
     32'h2A,
     32'hBA,
     32'h8C,
     32'h95,
     32'hCB,
     32'h61,
     32'h4A,
     32'hBA,
     32'hB7,
     32'hF4,
     32'h43,
     32'hF3,
     32'h69,
     32'h9,
     32'hC8,
     32'hD5,
     32'hC3,
     32'hC7,
     32'h4F,
     32'h99,
     32'hB4,
     32'h73,
     32'h48,
     32'h18,
     32'h7D,
     32'hC9,
     32'h8A,
     32'hBC,
     32'h36,
     32'h6,
     32'h8,
     32'h4F,
     32'hA4,
     32'h60,
     32'h85,
     32'hA7,
     32'h6,
     32'hEC,
     32'hF5,
     32'hFB,
     32'hDE,
     32'h18,
     32'hB7,
     32'hFC,
     32'hDE,
     32'h9C,
     32'h9E,
     32'h6F,
     32'hDC,
     32'h30,
     32'hD5,
     32'h6D,
     32'h6A,
     32'h6A,
     32'hA2,
     32'h69,
     32'hB8,
     32'hBD,
     32'h56,
     32'h47,
     32'h42,
     32'h63,
     32'h99,
     32'hD1,
     32'h36,
     32'hE2,
     32'h9D,
     32'h1E,
     32'h90,
     32'h81,
     32'hB1,
     32'h2B,
     32'h18,
     32'h2B,
     32'h75,
     32'h6C,
     32'hB,
     32'hEA,
     32'h56,
     32'hE0,
     32'h53,
     32'h21,
     32'hDC,
     32'h69,
     32'hAA,
     32'h9B,
     32'h25,
     32'hD5,
     32'h8B,
     32'hC1,
     32'hCD,
     32'h57,
     32'h46,
     32'h87,
     32'h22,
     32'hC4,
     32'h1,
     32'h7A,
     32'hC7,
     32'h43,
     32'h5F,
     32'hC3,
     32'hD9,
     32'hA6,
     32'hFC,
     32'hC0,
     32'h4F,
     32'hCC,
     32'h14,
     32'hF7,
     32'h6B,
     32'hD1,
     32'hA1,
     32'h4C,
     32'h3B,
     32'h90,
     32'hBB,
     32'hC0,
     32'hEC,
     32'hBE,
     32'h48,
     32'h60,
     32'hDE,
     32'h1,
     32'h79,
     32'h55,
     32'h8C,
     32'h38,
     32'h56,
     32'h6F,
     32'h7B,
     32'hCB,
     32'hBA,
     32'h13,
     32'h5,
     32'h77,
     32'h1A,
     32'hB8,
     32'h37,
     32'h80,
     32'hA7,
     32'h22,
     32'h95,
     32'hCF,
     32'h37,
     32'h53,
     32'hE2,
     32'h3E,
     32'h69,
     32'hC8,
     32'h83,
     32'hEE,
     32'hCB,
     32'h5A,
     32'h64,
     32'hD2,
     32'h4B,
     32'h5A,
     32'hA8,
     32'h24,
     32'hE0,
     32'hA9,
     32'h6F,
     32'h62,
     32'hE1,
     32'h25,
     32'hC6,
     32'hF7,
     32'h4E,
     32'hDB,
     32'h34,
     32'hE2,
     32'hBC,
     32'hE0,
     32'hCC,
     32'h39,
     32'h7,
     32'hE3,
     32'h62,
     32'h83,
     32'h69,
     32'hAA,
     32'h7,
     32'h9,
     32'h63,
     32'hB5,
     32'h8F,
     32'h1E,
     32'h15,
     32'hB0,
     32'h43,
     32'h92,
     32'hF9,
     32'h26,
     32'h48,
     32'hB8,
     32'h9C,
     32'hEF,
     32'h8C,
     32'hEE,
     32'hA1,
     32'h33,
     32'hAA,
     32'hB3,
     32'h94,
     32'hA8};	// src/main/scala/verilog/Shell.scala:112:21
  reg                 correct;	// src/main/scala/verilog/Shell.scala:75:24
  reg                 finish;	// src/main/scala/verilog/Shell.scala:76:23
  reg  [11:0]         memAddr;	// src/main/scala/verilog/Shell.scala:77:24
  reg  [11:0]         romAddr;	// src/main/scala/verilog/Shell.scala:78:24
  reg  [2:0]          state;	// src/main/scala/verilog/Shell.scala:91:22
  wire                _GEN_0 = state == 3'h0;	// src/main/scala/verilog/Shell.scala:91:22, :99:17
  wire                _GEN_1 = state == 3'h1;	// src/main/scala/verilog/Shell.scala:91:22, :94:11, :99:17
  wire                _GEN_2 = state == 3'h2;	// src/main/scala/verilog/Shell.scala:91:22, :94:31, :99:17
  wire                _GEN_3 = state == 3'h3;	// src/main/scala/verilog/Shell.scala:91:22, :99:17, :125:57
  wire                _GEN_4 = _GEN_1 | _GEN_2;	// src/main/scala/verilog/Shell.scala:85:16, :99:17
  wire                _GEN_5 = state == 3'h5;	// src/main/scala/verilog/Shell.scala:91:22, :94:50, :99:17
  wire                _GEN_6 = _GEN_3 | state == 3'h4;	// src/main/scala/verilog/Shell.scala:77:24, :91:22, :99:17, :129:13
  wire                _GEN_7 = ~_GEN_0 & (_GEN_4 | ~_GEN_6 & _GEN_5);	// src/main/scala/verilog/Shell.scala:77:24, :83:22, :84:17, :85:16, :99:17, :114:21, :122:21
  reg                 REG;	// src/main/scala/verilog/Shell.scala:141:19
  always @(posedge clock) begin	// <stdin>:478:11
    if (reset) begin	// <stdin>:478:11
      correct <= 1'h0;	// <stdin>:477:3, src/main/scala/verilog/Shell.scala:75:24
      finish <= 1'h0;	// <stdin>:477:3, src/main/scala/verilog/Shell.scala:76:23
      memAddr <= 12'h0;	// src/main/scala/verilog/Shell.scala:77:24
      romAddr <= 12'h0;	// src/main/scala/verilog/Shell.scala:77:24, :78:24
      state <= 3'h0;	// src/main/scala/verilog/Shell.scala:91:22
    end
    else begin	// <stdin>:478:11
      automatic logic [1023:0][31:0] _GEN_8 =
        {32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hA8,
         32'hFFFDDA3F,
         32'hFFFE98B1,
         32'hFFFDBF1D,
         32'hFFFD7B6C,
         32'hFFFDF896,
         32'hFFFD89DD,
         32'hFFFE0995,
         32'hFFFD81E1,
         32'hFFFD9156,
         32'hFFFDF714,
         32'hFFFD6AA1,
         32'hFFFDA9FA,
         32'hFFFDA69F,
         32'hFFFDE479,
         32'hFFFCF359,
         32'hFFFD7C87,
         32'hFFFDDDC7,
         32'hFFFE514C,
         32'hFFFDC5B0,
         32'hFFFDFDA5,
         32'hFFFE35E5,
         32'hFFFD91D9,
         32'hFFFE1B9A,
         32'hFFFDB7B0,
         32'hFFFD76B2,
         32'hFFFE0D40,
         32'hFFFD6FA7,
         32'hFFFD9AC0,
         32'hFFFDC0AA,
         32'hFFFE0165,
         32'hFFFD29A9,
         32'hFFFD597E,
         32'hFFFD6D28,
         32'hFFFE82B6,
         32'hFFFDCCF5,
         32'hFFFD9385,
         32'hFFFE5F52,
         32'hFFFE2F87,
         32'hFFFDFFB8,
         32'hFFFDBB9F,
         32'hFFFD585B,
         32'hFFFDE31B,
         32'hFFFD234D,
         32'hFFFDB244,
         32'hFFFE05B8,
         32'hFFFDF608,
         32'hFFFCFA1D,
         32'hFFFDA45C,
         32'hFFFDCBFE,
         32'hFFFE97F3,
         32'hFFFDC500,
         32'hFFFE06C3,
         32'hFFFE484F,
         32'hFFFDB751,
         32'hFFFE4181,
         32'hFFFDE298,
         32'hFFFDD93D,
         32'hFFFDD6D7,
         32'hFFFD9540,
         32'hFFFD925D,
         32'hFFFDB489,
         32'hFFFE3C57,
         32'hFFFD129A,
         32'hFFFDBFF9,
         32'hFFFD9AA3,
         32'hFFFE72A8,
         32'hFFFDF6C4,
         32'hFFFDDDB0,
         32'hFFFE43AA,
         32'hFFFDD97A,
         32'hFFFE27A4,
         32'hFFFDC97F,
         32'hFFFE0859,
         32'hFFFE0CB0,
         32'hFFFD878C,
         32'hFFFDC785,
         32'hFFFDA734,
         32'hFFFE1BC1,
         32'hFFFD3802,
         32'hFFFDE6E9,
         32'hFFFD85E1,
         32'hFFFEA604,
         32'hFFFDAE7A,
         32'hFFFD3D8A,
         32'hFFFDE506,
         32'hFFFD90AB,
         32'hFFFE5C01,
         32'hFFFD6D8E,
         32'hFFFD3F71,
         32'hFFFDA1AC,
         32'hFFFD11BA,
         32'hFFFD6173,
         32'hFFFDB087,
         32'hFFFDCCAE,
         32'hFFFCADBD,
         32'hFFFD2657,
         32'hFFFDCA69,
         32'hFFFE8DAD,
         32'hFFFE02F8,
         32'hFFFE028B,
         32'hFFFE5FA3,
         32'hFFFDFD18,
         32'hFFFE4A79,
         32'hFFFDDDEE,
         32'hFFFDC981,
         32'hFFFE80F6,
         32'hFFFDC3E1,
         32'hFFFDFE9F,
         32'hFFFDEE38,
         32'hFFFE1246,
         32'hFFFD6F01,
         32'hFFFDE7E2,
         32'hFFFE24AC,
         32'hFFFED0E2,
         32'hFFFE3DA2,
         32'hFFFE4416,
         32'hFFFE81BB,
         32'hFFFE4221,
         32'hFFFE9C9F,
         32'hFFFE2142,
         32'hFFFE03DF,
         32'hFFFE9125,
         32'hFFFDC609,
         32'hFFFDFF3A,
         32'hFFFE324F,
         32'hFFFE58A4,
         32'hFFFD8339,
         32'hFFFDA95D,
         32'hFFFDB477,
         32'hFFFE54F7,
         32'hFFFDD429,
         32'hFFFDFDFC,
         32'hFFFE3B1D,
         32'hFFFDF587,
         32'hFFFE5A02,
         32'hFFFDBD1C,
         32'hFFFD9E70,
         32'hFFFE192A,
         32'hFFFD90B4,
         32'hFFFDE240,
         32'hFFFDB2B3,
         32'hFFFDEB55,
         32'hFFFD37F6,
         32'hFFFDA7F4,
         32'hFFFD9655,
         32'hFFFEAED7,
         32'hFFFDC551,
         32'hFFFDB416,
         32'hFFFE33D9,
         32'hFFFDAE52,
         32'hFFFE19A5,
         32'hFFFDCB40,
         32'hFFFD730D,
         32'hFFFE17B6,
         32'hFFFD6668,
         32'hFFFD9E04,
         32'hFFFDEB0F,
         32'hFFFDE987,
         32'hFFFCBD77,
         32'hFFFD6EEF,
         32'hFFFD61C3,
         32'hFFFE73C3,
         32'hFFFDF932,
         32'hFFFDF152,
         32'hFFFE2D6C,
         32'hFFFDFE29,
         32'hFFFE93C3,
         32'hFFFDEBCA,
         32'hFFFD801F,
         32'hFFFE00B4,
         32'hFFFD9DA3,
         32'hFFFDA349,
         32'hFFFDD741,
         32'hFFFDE551,
         32'hFFFD3A66,
         32'hFFFDA373,
         32'hFFFE5F76,
         32'hFFFEA8E5,
         32'hFFFE01DD,
         32'hFFFEA2B0,
         32'hFFFEA4DC,
         32'hFFFE7A09,
         32'hFFFE8B76,
         32'hFFFE3D8F,
         32'hFFFE36EC,
         32'hFFFE5B6A,
         32'hFFFE18F0,
         32'hFFFE099B,
         32'hFFFE2B94,
         32'hFFFE8D18,
         32'hFFFDE8C7,
         32'hFFFE29C2,
         32'hFFFDCA42,
         32'hFFFE773F,
         32'hFFFDD6CE,
         32'hFFFDD4F2,
         32'hFFFE3FFF,
         32'hFFFDB45B,
         32'hFFFE46D8,
         32'hFFFDB480,
         32'hFFFDA4B4,
         32'hFFFDF550,
         32'hFFFD737E,
         32'hFFFDB989,
         32'hFFFDD051,
         32'hFFFDEB69,
         32'hFFFD04A8,
         32'hFFFD6F66,
         32'hFFFD7EEC,
         32'hFFFE6418,
         32'hFFFD5B22,
         32'hFFFD8111,
         32'hFFFDE9E2,
         32'hFFFD973E,
         32'hFFFDD053,
         32'hFFFD579F,
         32'hFFFD1755,
         32'hFFFDE7AB,
         32'hFFFD40CF,
         32'hFFFD0732,
         32'hFFFD6BD8,
         32'hFFFDA45D,
         32'hFFFCA013,
         32'hFFFCDA6A,
         32'hFFFE1E79,
         32'hFFFEA738,
         32'hFFFE4413,
         32'hFFFE701C,
         32'hFFFED30A,
         32'hFFFEB62A,
         32'hFFFE6B38,
         32'hFFFE2EE1,
         32'hFFFE2247,
         32'hFFFEA9C8,
         32'hFFFDDED6,
         32'hFFFE5160,
         32'hFFFE3A47,
         32'hFFFE8D54,
         32'hFFFDCD8C,
         32'hFFFE48D6,
         32'hFFFD6639,
         32'hFFFE7430,
         32'hFFFDBF23,
         32'hFFFD52D2,
         32'hFFFDD73D,
         32'hFFFDABA0,
         32'hFFFE3736,
         32'hFFFD8EEA,
         32'hFFFD698D,
         32'hFFFDA1D3,
         32'hFFFD36D2,
         32'hFFFD7D24,
         32'hFFFD8246,
         32'hFFFDAEE7,
         32'hFFFCE411,
         32'hFFFD492B,
         32'hFFFFFFC2,
         32'hFFFFFF94,
         32'hFFFFFFBA,
         32'hFFFFFFDB,
         32'hFFFFFFFD,
         32'hFFFFFFEE,
         32'hFFFFFF87,
         32'hFFFFFFA9,
         32'hFFFFFFAB,
         32'hFFFFFFF1,
         32'hFFFFFFC0,
         32'hFFFFFFD0,
         32'hFFFFFFE2,
         32'hFFFFFFAD,
         32'hFFFFFFC5,
         32'hFFFFFFB9,
         32'hFFFFFFC9,
         32'hFFFFFFF3,
         32'hFFFFFFDA,
         32'hFFFFFFEF,
         32'hFFFFFFD3,
         32'hFFFFFFBC,
         32'hFFFFFFF6,
         32'hFFFFFFFA,
         32'hFFFFFFFC,
         32'hFFFFFFB4,
         32'hFFFFFFEB,
         32'hFFFFFFD3,
         32'hFFFFFFF1,
         32'hFFFFFFB3,
         32'hFFFFFFAE,
         32'hFFFFFFDF,
         32'hFFFFFFBC,
         32'hFFFFFFEE,
         32'hFFFFFFEF,
         32'hFFFFFF85,
         32'hFFFFFFA3,
         32'hFFFFFFB0,
         32'hFFFFFFDF,
         32'hFFFFFFA9,
         32'hFFFFFFF1,
         32'hFFFFFFF2,
         32'hFFFFFFD0,
         32'hFFFFFFDB,
         32'hFFFFFF86,
         32'hFFFFFFB2,
         32'hFFFFFFD5,
         32'hFFFFFFCC,
         32'hFFFFFFD0,
         32'hFFFFFFF7,
         32'hFFFFFFCA,
         32'hFFFFFFD0,
         32'hFFFFFFD7,
         32'hFFFFFFAF,
         32'hFFFFFFEE,
         32'hFFFFFFB4,
         32'hFFFFFFD4,
         32'hFFFFFFC2,
         32'hFFFFFF9D,
         32'hFFFFFF94,
         32'hFFFFFF9F,
         32'hFFFFFFF5,
         32'hFFFFFF95,
         32'hFFFFFFAC,
         32'hFFFFFFFE,
         32'hFFFFFFB3,
         32'hFFFFFF97,
         32'hFFFFFFF2,
         32'hFFFFFFC3,
         32'hFFFFFFA7,
         32'hFFFFFFF0,
         32'hFFFFFF93,
         32'hFFFFFFBD,
         32'hFFFFFFF7,
         32'hFFFFFF98,
         32'hFFFFFFCF,
         32'hFFFFFF98,
         32'hFFFFFFDA,
         32'hFFFFFFC9,
         32'hFFFFFF96,
         32'hFFFFFFB8,
         32'hFFFFFFC5,
         32'hFFFFFF81,
         32'hFFFFFFED,
         32'hFFFFFFA7,
         32'hFFFFFFC2,
         32'hFFFFFFCA,
         32'hFFFFFFE5,
         32'hFFFFFFC3,
         32'hFFFFFF99,
         32'hFFFFFFC4,
         32'hFFFFFFA5,
         32'hFFFFFFCB,
         32'hFFFFFFDA,
         32'hFFFFFFCF,
         32'hFFFFFFFC,
         32'hFFFFFF96,
         32'hFFFFFFA5,
         32'hFFFFFFB7,
         32'hFFFFFFC3,
         32'hFFFFFFB4,
         32'hFFFFFF96,
         32'hFFFFFFAC,
         32'hFFFFFFCA,
         32'hFFFFFFA1,
         32'hFFFFFF87,
         32'hFFFFFF85,
         32'hFFFFFF8D,
         32'hFFFFFF89,
         32'hFFFFFFCC,
         32'hFFFFFFA1,
         32'hFFFFFF85,
         32'hFFFFFF81,
         32'hFFFFFFC3,
         32'hFFFFFFC6,
         32'hFFFFFF9A,
         32'hFFFFFFCC,
         32'hFFFFFFF7,
         32'hFFFFFFD5,
         32'hFFFFFFBE,
         32'hFFFFFFD3,
         32'hFFFFFF9C,
         32'hFFFFFF87,
         32'hFFFFFFC7,
         32'hFFFFFF8D,
         32'hFFFFFFB3,
         32'hFFFFFFA7,
         32'hFFFFFFBE,
         32'hFFFFFF8C,
         32'hFFFFFFF7,
         32'hFFFFFFC8,
         32'hFFFFFFCB,
         32'hFFFFFFC7,
         32'hFFFFFFA4,
         32'hFFFFFFEA,
         32'hFFFFFFE2,
         32'hFFFFFF87,
         32'hFFFFFFED,
         32'hFFFFFFD2,
         32'hFFFFFF8B,
         32'hFFFFFFFA,
         32'hFFFFFFC4,
         32'hFFFFFF94,
         32'hFFFFFFA4,
         32'hFFFFFFD0,
         32'hFFFFFFD0,
         32'hFFFFFFB2,
         32'hFFFFFFDB,
         32'hFFFFFFBF,
         32'hFFFFFFAE,
         32'hFFFFFFEE,
         32'hFFFFFFC1,
         32'hFFFFFF93,
         32'hFFFFFFB6,
         32'hFFFFFFF9,
         32'hFFFFFF9C,
         32'hFFFFFFB3,
         32'hFFFFFFA2,
         32'hFFFFFFAC,
         32'hFFFFFF94,
         32'hFFFFFFAC,
         32'hFFFFFFED,
         32'hFFFFFFF9,
         32'hFFFFFF8E,
         32'hFFFFFFF0,
         32'hFFFFFF88,
         32'hFFFFFFA0,
         32'hFFFFFFC9,
         32'hFFFFFFAC,
         32'hFFFFFFB7,
         32'hFFFFFF9A,
         32'hFFFFFFED,
         32'hFFFFFFF4,
         32'hFFFFFFD7,
         32'hFFFFFF8E,
         32'hFFFFFFF5,
         32'hFFFFFF83,
         32'hFFFFFFC2,
         32'hFFFFFF96,
         32'hFFFFFFD9,
         32'hFFFFFFE3,
         32'hFFFFFFED,
         32'hFFFFFF94,
         32'hFFFFFFB9,
         32'hFFFFFFB1,
         32'hFFFFFFF7,
         32'hFFFFFFE5,
         32'hFFFFFFB5,
         32'hFFFFFFA6,
         32'hFFFFFFAF,
         32'hFFFFFF95,
         32'hFFFFFFF1,
         32'hFFFFFF9A,
         32'hFFFFFFAA,
         32'hFFFFFFEA,
         32'hFFFFFF94,
         32'hFFFFFFBF,
         32'hFFFFFFCC,
         32'hFFFFFFF7,
         32'hFFFFFF83,
         32'hFFFFFF93,
         32'hFFFFFFD5,
         32'hFFFFFF8C,
         32'hFFFFFFE7,
         32'hFFFFFFA6,
         32'hFFFFFFCD,
         32'hFFFFFFB1,
         32'hFFFFFFBC,
         32'hFFFFFFEB,
         32'hFFFFFFEE,
         32'hFFFFFFBB,
         32'hFFFFFF83,
         32'hFFFFFFAE,
         32'hFFFFFF98,
         32'hFFFFFFAB,
         32'hFFFFFFA4,
         32'hFFFFFFED,
         32'hFFFFFFA4,
         32'hFFFFFFA2,
         32'hFFFFFFB0,
         32'hFFFFFFB1,
         32'hFFFFFFD5,
         32'hFFFFFF8D,
         32'hFFFFFF90,
         32'hFFFFFFDD,
         32'hFFFFFFE2,
         32'hFFFFFF9F,
         32'hFFFFFFCB,
         32'hFFFFFFEE,
         32'hFFFFFFFA,
         32'hFFFFFFE4,
         32'hFFFFFFAD,
         32'hFFFFFF9A,
         32'hFFFFFF88,
         32'hFFFFFF8B,
         32'hFFFFFF9A,
         32'hFFFFFFE8,
         32'hFFFFFFC9,
         32'hFFFFFF9A,
         32'hFFFFFF92,
         32'hFFFFFFE0,
         32'hFFFFFFFA,
         32'hFFFFFFBB,
         32'hFFFFFFAA,
         32'hFFFFFFCA,
         32'hFFFFFFFA,
         32'hFFFFFFA8,
         32'hFFFFFFC4,
         32'hFFFFFF90,
         32'hFFFFFFFB,
         32'hFFFFFFB2,
         32'hFFFFFFCB,
         32'hFFFFFFEE,
         32'hFFFFFFB3,
         32'hFFFFFFA1,
         32'hFFFFFF8A,
         32'h60,
         32'h79,
         32'hE3,
         32'h96,
         32'h89,
         32'hCC,
         32'h48,
         32'h20,
         32'h19,
         32'hF1,
         32'hF8,
         32'h7A,
         32'h85,
         32'hF5,
         32'h4D,
         32'hD7,
         32'hEB,
         32'h6D,
         32'h65,
         32'h9B,
         32'hE7,
         32'h86,
         32'hF6,
         32'h41,
         32'h6A,
         32'hF9,
         32'hCE,
         32'h28,
         32'h3D,
         32'h70,
         32'h1B,
         32'h8B,
         32'h91,
         32'h2A,
         32'h6A,
         32'h38,
         32'h36,
         32'hAB,
         32'h7A,
         32'hFA,
         32'hA7,
         32'h26,
         32'hF8,
         32'h91,
         32'h80,
         32'h5B,
         32'hFA,
         32'hCB,
         32'h18,
         32'h7F,
         32'h2A,
         32'hBA,
         32'h8C,
         32'h95,
         32'hCB,
         32'h61,
         32'h4A,
         32'hBA,
         32'hB7,
         32'hF4,
         32'h43,
         32'hF3,
         32'h69,
         32'h9,
         32'hC8,
         32'hD5,
         32'hC3,
         32'hC7,
         32'h4F,
         32'h99,
         32'hB4,
         32'h73,
         32'h48,
         32'h18,
         32'h7D,
         32'hC9,
         32'h8A,
         32'hBC,
         32'h36,
         32'h6,
         32'h8,
         32'h4F,
         32'hA4,
         32'h60,
         32'h85,
         32'hA7,
         32'h6,
         32'hEC,
         32'hF5,
         32'hFB,
         32'hDE,
         32'h18,
         32'hB7,
         32'hFC,
         32'hDE,
         32'h9C,
         32'h9E,
         32'h6F,
         32'hDC,
         32'h30,
         32'hD5,
         32'h6D,
         32'h6A,
         32'h6A,
         32'hA2,
         32'h69,
         32'hB8,
         32'hBD,
         32'h56,
         32'h47,
         32'h42,
         32'h63,
         32'h99,
         32'hD1,
         32'h36,
         32'hE2,
         32'h9D,
         32'h1E,
         32'h90,
         32'h81,
         32'hB1,
         32'h2B,
         32'h18,
         32'h2B,
         32'h75,
         32'h6C,
         32'hB,
         32'hEA,
         32'h56,
         32'hE0,
         32'h53,
         32'h21,
         32'hDC,
         32'h69,
         32'hAA,
         32'h9B,
         32'h25,
         32'hD5,
         32'h8B,
         32'hC1,
         32'hCD,
         32'h57,
         32'h46,
         32'h87,
         32'h22,
         32'hC4,
         32'h1,
         32'h7A,
         32'hC7,
         32'h43,
         32'h5F,
         32'hC3,
         32'hD9,
         32'hA6,
         32'hFC,
         32'hC0,
         32'h4F,
         32'hCC,
         32'h14,
         32'hF7,
         32'h6B,
         32'hD1,
         32'hA1,
         32'h4C,
         32'h3B,
         32'h90,
         32'hBB,
         32'hC0,
         32'hEC,
         32'hBE,
         32'h48,
         32'h60,
         32'hDE,
         32'h1,
         32'h79,
         32'h55,
         32'h8C,
         32'h38,
         32'h56,
         32'h6F,
         32'h7B,
         32'hCB,
         32'hBA,
         32'h13,
         32'h5,
         32'h77,
         32'h1A,
         32'hB8,
         32'h37,
         32'h80,
         32'hA7,
         32'h22,
         32'h95,
         32'hCF,
         32'h37,
         32'h53,
         32'hE2,
         32'h3E,
         32'h69,
         32'hC8,
         32'h83,
         32'hEE,
         32'hCB,
         32'h5A,
         32'h64,
         32'hD2,
         32'h4B,
         32'h5A,
         32'hA8,
         32'h24,
         32'hE0,
         32'hA9,
         32'h6F,
         32'h62,
         32'hE1,
         32'h25,
         32'hC6,
         32'hF7,
         32'h4E,
         32'hDB,
         32'h34,
         32'hE2,
         32'hBC,
         32'hE0,
         32'hCC,
         32'h39,
         32'h7,
         32'hE3,
         32'h62,
         32'h83,
         32'h69,
         32'hAA,
         32'h7,
         32'h9,
         32'h63,
         32'hB5,
         32'h8F,
         32'h1E,
         32'h15,
         32'hB0,
         32'h43,
         32'h92,
         32'hF9,
         32'h26,
         32'h48,
         32'hB8,
         32'h9C,
         32'hEF,
         32'h8C,
         32'hEE,
         32'hA1,
         32'h33,
         32'hAA,
         32'hB3,
         32'h94,
         32'hA8};	// src/main/scala/verilog/Shell.scala:112:21
      automatic logic [11:0]         _GEN_9;	// src/main/scala/verilog/Shell.scala:77:24, :99:17
      automatic logic                wrong;	// src/main/scala/verilog/Shell.scala:142:37
      automatic logic                _GEN_10;	// src/main/scala/verilog/Shell.scala:78:24, :99:17, :141:36, :143:17
      automatic logic                _GEN_11 = _GEN_1 | _GEN_2 | _GEN_6;	// src/main/scala/verilog/Shell.scala:77:24, :78:24, :99:17
      automatic logic [11:0]         _GEN_12;	// src/main/scala/verilog/Shell.scala:78:24, :99:17
      automatic logic [2:0]          _GEN_13;	// src/main/scala/verilog/Shell.scala:91:22, :99:17, :141:36, :146:{15,21}, :149:14
      automatic logic                _GEN_14;	// src/main/scala/verilog/Shell.scala:76:23, :99:17, :141:36, :151:16
      automatic logic [7:0]          _GEN_15;	// src/main/scala/verilog/Shell.scala:76:23, :99:17, :101:22, :132:14
      automatic logic [7:0][11:0]    _GEN_16;	// src/main/scala/verilog/Shell.scala:77:24, :99:17, :101:22, :115:15, :123:15
      automatic logic [7:0][11:0]    _GEN_17;	// src/main/scala/verilog/Shell.scala:78:24, :99:17, :101:22
      automatic logic [7:0][2:0]     _GEN_18;	// src/main/scala/verilog/Shell.scala:99:17, :101:22, :117:54, :125:49, :129:13, :133:13
      _GEN_9 = _GEN_6 | ~_GEN_5 ? memAddr : memAddr + 12'h1;	// src/main/scala/verilog/Shell.scala:77:24, :99:17, :115:26, :137:47
      wrong = _dut_io_dataOut != _GEN_8[romAddr[9:0]];	// <stdin>:1342:35, src/main/scala/verilog/Shell.scala:72:19, :78:24, :112:21, :142:37
      _GEN_10 = _GEN_5 & REG;	// src/main/scala/verilog/Shell.scala:78:24, :99:17, :141:{19,36}, :143:17
      _GEN_12 = _GEN_11 | ~_GEN_10 ? romAddr : romAddr + 12'h1;	// src/main/scala/verilog/Shell.scala:78:24, :99:17, :115:26, :141:36, :143:{17,28}
      _GEN_13 = _GEN_5 & REG & (wrong | (&romAddr)) ? 3'h0 : state;	// src/main/scala/verilog/Shell.scala:78:24, :91:22, :99:17, :141:{19,36}, :142:37, :146:{15,21}, :149:{14,23}
      _GEN_14 = _GEN_10 ? wrong | (&romAddr) : finish;	// src/main/scala/verilog/Shell.scala:76:23, :78:24, :99:17, :141:36, :142:37, :143:17, :149:23, :151:{16,22}
      if (_GEN_0 | _GEN_11 | ~_GEN_10) begin	// src/main/scala/verilog/Shell.scala:75:24, :78:24, :99:17, :141:36, :143:17
      end
      else	// src/main/scala/verilog/Shell.scala:75:24, :99:17
        correct <= ~wrong;	// src/main/scala/verilog/Shell.scala:75:24, :142:37, :145:20
      _GEN_15 =
        {{_GEN_14},
         {_GEN_14},
         {_GEN_14},
         {~_dut_io_busy},
         {finish},
         {finish},
         {finish},
         {~io_start & finish}};	// src/main/scala/verilog/Shell.scala:72:19, :76:23, :99:17, :101:22, :103:16, :132:{14,21}, :141:36, :151:16
      finish <= _GEN_15[state];	// src/main/scala/verilog/Shell.scala:76:23, :91:22, :99:17, :101:22, :132:14
      _GEN_16 =
        {{_GEN_9},
         {_GEN_9},
         {_GEN_9},
         {memAddr},
         {memAddr},
         {memAddr + 12'h1},
         {memAddr + 12'h1},
         {io_start ? 12'h0 : io_check ? 12'h400 : memAddr}};	// src/main/scala/verilog/Shell.scala:77:24, :99:17, :101:22, :102:17, :105:28, :106:17, :115:{15,26}, :123:{15,26}
      memAddr <= _GEN_16[state];	// src/main/scala/verilog/Shell.scala:77:24, :91:22, :99:17, :101:22, :115:15, :123:15
      _GEN_17 =
        {{_GEN_12},
         {_GEN_12},
         {_GEN_12},
         {romAddr},
         {romAddr},
         {romAddr},
         {romAddr},
         {io_start | ~io_check ? romAddr : 12'h400}};	// src/main/scala/verilog/Shell.scala:78:24, :99:17, :101:22, :105:28, :106:17
      romAddr <= _GEN_17[state];	// src/main/scala/verilog/Shell.scala:78:24, :91:22, :99:17, :101:22
      _GEN_18 =
        {{_GEN_13},
         {_GEN_13},
         {_GEN_13},
         {_dut_io_busy ? state : 3'h0},
         {3'h4},
         {(&memAddr) ? 3'h3 : state},
         {memAddr == 12'h3FF ? 3'h2 : state},
         {io_start ? 3'h1 : io_check ? 3'h5 : state}};	// src/main/scala/verilog/Shell.scala:72:19, :77:24, :91:22, :94:{11,31,50}, :99:17, :101:22, :104:15, :105:28, :108:15, :117:{20,54,62}, :125:{20,49,57}, :129:13, :133:{13,19}, :141:36, :146:{15,21}, :149:14
      state <= _GEN_18[state];	// src/main/scala/verilog/Shell.scala:91:22, :99:17, :101:22, :117:54, :125:49, :129:13, :133:13
    end
    REG <= _GEN_7;	// src/main/scala/verilog/Shell.scala:84:17, :99:17, :141:19
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// <stdin>:477:3
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:477:3
      `FIRRTL_BEFORE_INITIAL	// <stdin>:477:3
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:477:3
      automatic logic [31:0] _RANDOM[0:0];	// <stdin>:477:3
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:477:3
        `INIT_RANDOM_PROLOG_	// <stdin>:477:3
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:477:3
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;	// <stdin>:477:3
        correct = _RANDOM[/*Zero width*/ 1'b0][0];	// <stdin>:477:3, src/main/scala/verilog/Shell.scala:75:24
        finish = _RANDOM[/*Zero width*/ 1'b0][1];	// <stdin>:477:3, src/main/scala/verilog/Shell.scala:75:24, :76:23
        memAddr = _RANDOM[/*Zero width*/ 1'b0][13:2];	// <stdin>:477:3, src/main/scala/verilog/Shell.scala:75:24, :77:24
        romAddr = _RANDOM[/*Zero width*/ 1'b0][25:14];	// <stdin>:477:3, src/main/scala/verilog/Shell.scala:75:24, :78:24
        state = _RANDOM[/*Zero width*/ 1'b0][28:26];	// <stdin>:477:3, src/main/scala/verilog/Shell.scala:75:24, :91:22
        REG = _RANDOM[/*Zero width*/ 1'b0][29];	// <stdin>:477:3, src/main/scala/verilog/Shell.scala:75:24, :141:19
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:477:3
      `FIRRTL_AFTER_INITIAL	// <stdin>:477:3
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  MMTopModule dut (	// src/main/scala/verilog/Shell.scala:72:19
    .clock          (clock),
    .reset          (reset),
    .io_operation   (~(state == 3'h1 | state == 3'h2 | state == 3'h5)),	// src/main/scala/verilog/Shell.scala:75:24, :91:22, :93:26, :94:{11,31,41,50}
    .io_dataIn      (_GEN_0 | ~_GEN_1 ? 9'h0 : _GEN[memAddr[9:0]][8:0]),	// <stdin>:1292:33, src/main/scala/verilog/Shell.scala:77:24, :81:17, :99:17, :112:21
    .io_address     ({20'h0, memAddr}),	// src/main/scala/verilog/Shell.scala:77:24, :82:18
    .io_enable      (_GEN_7),	// src/main/scala/verilog/Shell.scala:84:17, :99:17
    .io_writeEnable (~_GEN_0 & (_GEN_1 | _GEN_2)),	// src/main/scala/verilog/Shell.scala:83:22, :99:17, :113:26
    .io_start       (~(_GEN_0 | _GEN_4) & _GEN_3),	// src/main/scala/verilog/Shell.scala:85:16, :99:17
    .io_dataOut     (_dut_io_dataOut),
    .io_busy        (_dut_io_busy)
  );
  assign io_finish = finish;	// <stdin>:477:3, src/main/scala/verilog/Shell.scala:76:23
  assign io_correct = correct;	// <stdin>:477:3, src/main/scala/verilog/Shell.scala:75:24
endmodule

module FPGAShellWrapper(	// <stdin>:1359:3
  input  start,	// src/main/scala/verilog/ShellWrapper.scala:11:17
         check,	// src/main/scala/verilog/ShellWrapper.scala:12:17
         clock,	// src/main/scala/verilog/ShellWrapper.scala:13:17
         reset,	// src/main/scala/verilog/ShellWrapper.scala:14:17
  output finish,	// src/main/scala/verilog/ShellWrapper.scala:16:18
         correct	// src/main/scala/verilog/ShellWrapper.scala:17:19
);

  FPGAShell shell (	// src/main/scala/verilog/ShellWrapper.scala:21:11
    .clock      (clock),
    .reset      (~reset),	// src/main/scala/verilog/ShellWrapper.scala:20:40
    .io_start   (~start),	// src/main/scala/verilog/ShellWrapper.scala:24:21
    .io_check   (~check),	// src/main/scala/verilog/ShellWrapper.scala:25:21
    .io_finish  (finish),
    .io_correct (correct)
  );
endmodule

