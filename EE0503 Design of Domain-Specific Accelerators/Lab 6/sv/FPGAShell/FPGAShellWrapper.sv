// Generated by CIRCT firtool-1.56.0
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// VCS coverage exclude_file
module mem_592x8(	// src/main/scala/Memory.scala:39:24
  input  [9:0] R0_addr,
  input        R0_en,
               R0_clk,
  input  [9:0] R1_addr,
  input        R1_en,
               R1_clk,
  input  [9:0] R2_addr,
  input        R2_en,
               R2_clk,
  input  [9:0] R3_addr,
  input        R3_en,
               R3_clk,
  input  [9:0] R4_addr,
  input        R4_en,
               R4_clk,
  input  [9:0] R5_addr,
  input        R5_en,
               R5_clk,
  input  [9:0] R6_addr,
  input        R6_en,
               R6_clk,
  input  [9:0] W0_addr,
  input        W0_en,
               W0_clk,
  input  [7:0] W0_data,
  input  [9:0] W1_addr,
  input        W1_en,
               W1_clk,
  input  [7:0] W1_data,
  input  [9:0] W2_addr,
  input        W2_en,
               W2_clk,
  input  [7:0] W2_data,
  input  [9:0] W3_addr,
  input        W3_en,
               W3_clk,
  input  [7:0] W3_data,
  input  [9:0] W4_addr,
  input        W4_en,
               W4_clk,
  input  [7:0] W4_data,
  input  [9:0] W5_addr,
  input        W5_en,
               W5_clk,
  input  [7:0] W5_data,
  input  [9:0] W6_addr,
  input        W6_en,
               W6_clk,
  input  [7:0] W6_data,
  output [7:0] R0_data,
               R1_data,
               R2_data,
               R3_data,
               R4_data,
               R5_data,
               R6_data
);

  reg [7:0] Memory[0:591];	// src/main/scala/Memory.scala:39:24
  reg       _R0_en_d0;	// src/main/scala/Memory.scala:39:24
  reg [9:0] _R0_addr_d0;	// src/main/scala/Memory.scala:39:24
  always @(posedge R0_clk) begin	// src/main/scala/Memory.scala:39:24
    _R0_en_d0 <= R0_en;	// src/main/scala/Memory.scala:39:24
    _R0_addr_d0 <= R0_addr;	// src/main/scala/Memory.scala:39:24
  end // always @(posedge)
  reg       _R1_en_d0;	// src/main/scala/Memory.scala:39:24
  reg [9:0] _R1_addr_d0;	// src/main/scala/Memory.scala:39:24
  always @(posedge R1_clk) begin	// src/main/scala/Memory.scala:39:24
    _R1_en_d0 <= R1_en;	// src/main/scala/Memory.scala:39:24
    _R1_addr_d0 <= R1_addr;	// src/main/scala/Memory.scala:39:24
  end // always @(posedge)
  reg       _R2_en_d0;	// src/main/scala/Memory.scala:39:24
  reg [9:0] _R2_addr_d0;	// src/main/scala/Memory.scala:39:24
  always @(posedge R2_clk) begin	// src/main/scala/Memory.scala:39:24
    _R2_en_d0 <= R2_en;	// src/main/scala/Memory.scala:39:24
    _R2_addr_d0 <= R2_addr;	// src/main/scala/Memory.scala:39:24
  end // always @(posedge)
  reg       _R3_en_d0;	// src/main/scala/Memory.scala:39:24
  reg [9:0] _R3_addr_d0;	// src/main/scala/Memory.scala:39:24
  always @(posedge R3_clk) begin	// src/main/scala/Memory.scala:39:24
    _R3_en_d0 <= R3_en;	// src/main/scala/Memory.scala:39:24
    _R3_addr_d0 <= R3_addr;	// src/main/scala/Memory.scala:39:24
  end // always @(posedge)
  reg       _R4_en_d0;	// src/main/scala/Memory.scala:39:24
  reg [9:0] _R4_addr_d0;	// src/main/scala/Memory.scala:39:24
  always @(posedge R4_clk) begin	// src/main/scala/Memory.scala:39:24
    _R4_en_d0 <= R4_en;	// src/main/scala/Memory.scala:39:24
    _R4_addr_d0 <= R4_addr;	// src/main/scala/Memory.scala:39:24
  end // always @(posedge)
  reg       _R5_en_d0;	// src/main/scala/Memory.scala:39:24
  reg [9:0] _R5_addr_d0;	// src/main/scala/Memory.scala:39:24
  always @(posedge R5_clk) begin	// src/main/scala/Memory.scala:39:24
    _R5_en_d0 <= R5_en;	// src/main/scala/Memory.scala:39:24
    _R5_addr_d0 <= R5_addr;	// src/main/scala/Memory.scala:39:24
  end // always @(posedge)
  reg       _R6_en_d0;	// src/main/scala/Memory.scala:39:24
  reg [9:0] _R6_addr_d0;	// src/main/scala/Memory.scala:39:24
  always @(posedge R6_clk) begin	// src/main/scala/Memory.scala:39:24
    _R6_en_d0 <= R6_en;	// src/main/scala/Memory.scala:39:24
    _R6_addr_d0 <= R6_addr;	// src/main/scala/Memory.scala:39:24
  end // always @(posedge)
  always @(posedge W0_clk) begin	// src/main/scala/Memory.scala:39:24
    if (W0_en)	// src/main/scala/Memory.scala:39:24
      Memory[W0_addr] <= W0_data;	// src/main/scala/Memory.scala:39:24
    if (W1_en)	// src/main/scala/Memory.scala:39:24
      Memory[W1_addr] <= W1_data;	// src/main/scala/Memory.scala:39:24
    if (W2_en)	// src/main/scala/Memory.scala:39:24
      Memory[W2_addr] <= W2_data;	// src/main/scala/Memory.scala:39:24
    if (W3_en)	// src/main/scala/Memory.scala:39:24
      Memory[W3_addr] <= W3_data;	// src/main/scala/Memory.scala:39:24
    if (W4_en)	// src/main/scala/Memory.scala:39:24
      Memory[W4_addr] <= W4_data;	// src/main/scala/Memory.scala:39:24
    if (W5_en)	// src/main/scala/Memory.scala:39:24
      Memory[W5_addr] <= W5_data;	// src/main/scala/Memory.scala:39:24
    if (W6_en)	// src/main/scala/Memory.scala:39:24
      Memory[W6_addr] <= W6_data;	// src/main/scala/Memory.scala:39:24
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_MEM_	// src/main/scala/Memory.scala:39:24
    `ifdef RANDOMIZE_REG_INIT	// src/main/scala/Memory.scala:39:24
      reg [31:0] _RANDOM;	// src/main/scala/Memory.scala:39:24
      reg [31:0] _RANDOM_0;	// src/main/scala/Memory.scala:39:24
      reg [31:0] _RANDOM_1;	// src/main/scala/Memory.scala:39:24
    `endif // RANDOMIZE_REG_INIT
    reg [31:0] _RANDOM_MEM;	// src/main/scala/Memory.scala:39:24
    initial begin	// src/main/scala/Memory.scala:39:24
      `INIT_RANDOM_PROLOG_	// src/main/scala/Memory.scala:39:24
      `ifdef RANDOMIZE_MEM_INIT	// src/main/scala/Memory.scala:39:24
        for (logic [9:0] i = 10'h0; i < 10'h250; i += 10'h1) begin
          _RANDOM_MEM = `RANDOM;	// src/main/scala/Memory.scala:39:24
          Memory[i] = _RANDOM_MEM[7:0];	// src/main/scala/Memory.scala:39:24
        end	// src/main/scala/Memory.scala:39:24
      `endif // RANDOMIZE_MEM_INIT
      `ifdef RANDOMIZE_REG_INIT	// src/main/scala/Memory.scala:39:24
        _RANDOM = {`RANDOM};	// src/main/scala/Memory.scala:39:24
        _RANDOM_0 = {`RANDOM};	// src/main/scala/Memory.scala:39:24
        _RANDOM_1 = {`RANDOM};	// src/main/scala/Memory.scala:39:24
        _R0_en_d0 = _RANDOM[0];	// src/main/scala/Memory.scala:39:24
        _R0_addr_d0 = _RANDOM[10:1];	// src/main/scala/Memory.scala:39:24
        _R1_en_d0 = _RANDOM[11];	// src/main/scala/Memory.scala:39:24
        _R1_addr_d0 = _RANDOM[21:12];	// src/main/scala/Memory.scala:39:24
        _R2_en_d0 = _RANDOM[22];	// src/main/scala/Memory.scala:39:24
        _R2_addr_d0 = {_RANDOM[31:23], _RANDOM_0[0]};	// src/main/scala/Memory.scala:39:24
        _R3_en_d0 = _RANDOM_0[1];	// src/main/scala/Memory.scala:39:24
        _R3_addr_d0 = _RANDOM_0[11:2];	// src/main/scala/Memory.scala:39:24
        _R4_en_d0 = _RANDOM_0[12];	// src/main/scala/Memory.scala:39:24
        _R4_addr_d0 = _RANDOM_0[22:13];	// src/main/scala/Memory.scala:39:24
        _R5_en_d0 = _RANDOM_0[23];	// src/main/scala/Memory.scala:39:24
        _R5_addr_d0 = {_RANDOM_0[31:24], _RANDOM_1[1:0]};	// src/main/scala/Memory.scala:39:24
        _R6_en_d0 = _RANDOM_1[2];	// src/main/scala/Memory.scala:39:24
        _R6_addr_d0 = _RANDOM_1[12:3];	// src/main/scala/Memory.scala:39:24
      `endif // RANDOMIZE_REG_INIT
    end // initial
  `endif // ENABLE_INITIAL_MEM_
  assign R0_data = _R0_en_d0 ? Memory[_R0_addr_d0] : 8'bx;	// src/main/scala/Memory.scala:39:24
  assign R1_data = _R1_en_d0 ? Memory[_R1_addr_d0] : 8'bx;	// src/main/scala/Memory.scala:39:24
  assign R2_data = _R2_en_d0 ? Memory[_R2_addr_d0] : 8'bx;	// src/main/scala/Memory.scala:39:24
  assign R3_data = _R3_en_d0 ? Memory[_R3_addr_d0] : 8'bx;	// src/main/scala/Memory.scala:39:24
  assign R4_data = _R4_en_d0 ? Memory[_R4_addr_d0] : 8'bx;	// src/main/scala/Memory.scala:39:24
  assign R5_data = _R5_en_d0 ? Memory[_R5_addr_d0] : 8'bx;	// src/main/scala/Memory.scala:39:24
  assign R6_data = _R6_en_d0 ? Memory[_R6_addr_d0] : 8'bx;	// src/main/scala/Memory.scala:39:24
endmodule

module MemoryModule(	// <stdin>:3:3
  input         clock,	// <stdin>:4:11
                reset,	// <stdin>:5:11
  input  [31:0] io_dataIn,	// src/main/scala/Memory.scala:23:14
  input  [15:0] io_address,	// src/main/scala/Memory.scala:23:14
  input  [1:0]  io_dataSize,	// src/main/scala/Memory.scala:23:14
  input         io_writeEnable,	// src/main/scala/Memory.scala:23:14
  output [31:0] io_dataOut	// src/main/scala/Memory.scala:23:14
);

  wire [7:0] _mem_ext_R0_data;	// src/main/scala/Memory.scala:39:24
  wire [7:0] _mem_ext_R1_data;	// src/main/scala/Memory.scala:39:24
  wire [7:0] _mem_ext_R2_data;	// src/main/scala/Memory.scala:39:24
  wire [7:0] _mem_ext_R3_data;	// src/main/scala/Memory.scala:39:24
  wire [7:0] _mem_ext_R4_data;	// src/main/scala/Memory.scala:39:24
  wire [7:0] _mem_ext_R5_data;	// src/main/scala/Memory.scala:39:24
  wire [7:0] _mem_ext_R6_data;	// src/main/scala/Memory.scala:39:24
  wire       _GEN = io_dataSize == 2'h1;	// src/main/scala/Memory.scala:35:49
  wire       _GEN_0 = ~(|io_dataSize) | _GEN;	// src/main/scala/Memory.scala:35:{17,34,49}
  wire       _GEN_1 = io_dataSize == 2'h2;	// src/main/scala/Memory.scala:35:81
  `ifndef SYNTHESIS	// src/main/scala/Memory.scala:33:9
    always @(posedge clock) begin	// src/main/scala/Memory.scala:33:9
      if (~reset & io_address > 16'h24F) begin	// src/main/scala/Memory.scala:33:{9,21}
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/Memory.scala:33:9
          $error("Assertion failed: Address out of range\n    at Memory.scala:33 assert(io.address < cfg.memSize.U, \"Address out of range\")\n");	// src/main/scala/Memory.scala:33:9
        if (`STOP_COND_)	// src/main/scala/Memory.scala:33:9
          $fatal;	// src/main/scala/Memory.scala:33:9
      end
      if (~reset & ~(_GEN_0 | _GEN_1)) begin	// src/main/scala/Memory.scala:33:9, :34:9, :35:{34,66,81}
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/Memory.scala:34:9
          $error("Assertion failed: Invalid data size\n    at Memory.scala:34 assert(\n");	// src/main/scala/Memory.scala:34:9
        if (`STOP_COND_)	// src/main/scala/Memory.scala:34:9
          $fatal;	// src/main/scala/Memory.scala:34:9
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  wire       _GEN_2 = (|io_dataSize) & _GEN;	// src/main/scala/Memory.scala:35:{17,49}, :39:24, :43:25
  wire       _GEN_3 = io_writeEnable & _GEN_2;	// src/main/scala/Memory.scala:39:24, :42:24, :43:25
  wire [9:0] _GEN_4 = io_address[9:0] + 10'h1;	// src/main/scala/Memory.scala:45:18, :49:30
  wire       _GEN_5 = ~_GEN_0 & _GEN_1;	// src/main/scala/Memory.scala:35:{34,81}, :39:24, :43:25
  wire       _GEN_6 = io_writeEnable & _GEN_5;	// src/main/scala/Memory.scala:39:24, :42:24, :43:25
  mem_592x8 mem_ext (	// src/main/scala/Memory.scala:39:24
    .R0_addr (io_address[9:0]),	// src/main/scala/Memory.scala:78:17
    .R0_en   (_GEN_5),	// src/main/scala/Memory.scala:39:24, :43:25
    .R0_clk  (clock),
    .R1_addr (io_address[9:0] + 10'h1),	// src/main/scala/Memory.scala:45:18, :49:30, :77:29
    .R1_en   (_GEN_5),	// src/main/scala/Memory.scala:39:24, :43:25
    .R1_clk  (clock),
    .R2_addr (io_address[9:0] + 10'h2),	// src/main/scala/Memory.scala:45:18, :54:30, :76:29
    .R2_en   (_GEN_5),	// src/main/scala/Memory.scala:39:24, :43:25
    .R2_clk  (clock),
    .R3_addr (io_address[9:0] + 10'h3),	// src/main/scala/Memory.scala:45:18, :55:30, :75:29
    .R3_en   (_GEN_5),	// src/main/scala/Memory.scala:39:24, :43:25
    .R3_clk  (clock),
    .R4_addr (io_address[9:0]),	// src/main/scala/Memory.scala:70:17
    .R4_en   (_GEN_2),	// src/main/scala/Memory.scala:39:24, :43:25
    .R4_clk  (clock),
    .R5_addr (io_address[9:0] + 10'h1),	// src/main/scala/Memory.scala:45:18, :49:30, :69:29
    .R5_en   (_GEN_2),	// src/main/scala/Memory.scala:39:24, :43:25
    .R5_clk  (clock),
    .R6_addr (io_address[9:0]),	// src/main/scala/Memory.scala:64:48
    .R6_en   (~(|io_dataSize)),	// src/main/scala/Memory.scala:35:17
    .R6_clk  (clock),
    .W0_addr (io_address[9:0] + 10'h3),	// src/main/scala/Memory.scala:45:18, :55:30
    .W0_en   (_GEN_6),	// src/main/scala/Memory.scala:39:24, :42:24, :43:25
    .W0_clk  (clock),
    .W0_data (io_dataIn[31:24]),	// src/main/scala/Memory.scala:55:46
    .W1_addr (io_address[9:0] + 10'h2),	// src/main/scala/Memory.scala:45:18, :54:30
    .W1_en   (_GEN_6),	// src/main/scala/Memory.scala:39:24, :42:24, :43:25
    .W1_clk  (clock),
    .W1_data (io_dataIn[23:16]),	// src/main/scala/Memory.scala:54:46
    .W2_addr (_GEN_4),	// src/main/scala/Memory.scala:49:30
    .W2_en   (_GEN_6),	// src/main/scala/Memory.scala:39:24, :42:24, :43:25
    .W2_clk  (clock),
    .W2_data (io_dataIn[15:8]),	// src/main/scala/Memory.scala:49:46
    .W3_addr (io_address[9:0]),	// src/main/scala/Memory.scala:45:18
    .W3_en   (_GEN_6),	// src/main/scala/Memory.scala:39:24, :42:24, :43:25
    .W3_clk  (clock),
    .W3_data (io_dataIn[7:0]),	// src/main/scala/Memory.scala:45:40
    .W4_addr (_GEN_4),	// src/main/scala/Memory.scala:49:30
    .W4_en   (_GEN_3),	// src/main/scala/Memory.scala:39:24, :42:24, :43:25
    .W4_clk  (clock),
    .W4_data (io_dataIn[15:8]),	// src/main/scala/Memory.scala:49:46
    .W5_addr (io_address[9:0]),	// src/main/scala/Memory.scala:45:18
    .W5_en   (_GEN_3),	// src/main/scala/Memory.scala:39:24, :42:24, :43:25
    .W5_clk  (clock),
    .W5_data (io_dataIn[7:0]),	// src/main/scala/Memory.scala:45:40
    .W6_addr (io_address[9:0]),	// src/main/scala/Memory.scala:45:18
    .W6_en   (io_writeEnable & ~(|io_dataSize)),	// src/main/scala/Memory.scala:35:17, :39:24, :42:24, :43:25
    .W6_clk  (clock),
    .W6_data (io_dataIn[7:0]),	// src/main/scala/Memory.scala:45:40
    .R0_data (_mem_ext_R0_data),
    .R1_data (_mem_ext_R1_data),
    .R2_data (_mem_ext_R2_data),
    .R3_data (_mem_ext_R3_data),
    .R4_data (_mem_ext_R4_data),
    .R5_data (_mem_ext_R5_data),
    .R6_data (_mem_ext_R6_data)
  );
  assign io_dataOut =
    (|io_dataSize)
      ? (_GEN
           ? {16'h0, _mem_ext_R5_data, _mem_ext_R4_data}
           : _GEN_1
               ? {_mem_ext_R3_data, _mem_ext_R2_data, _mem_ext_R1_data, _mem_ext_R0_data}
               : 32'h0)
      : {24'h0, _mem_ext_R6_data};	// <stdin>:3:3, src/main/scala/Memory.scala:35:{17,49,81}, :39:24, :61:14, :62:23, :64:{18,24,29}, :67:{18,24}, :68:13, :74:{18,24}
endmodule

module VecDotProductModule(	// <stdin>:146:3
  input  [7:0]  io_vecA_0,	// src/main/scala/VecDotProduct.scala:17:14
                io_vecA_1,	// src/main/scala/VecDotProduct.scala:17:14
                io_vecA_2,	// src/main/scala/VecDotProduct.scala:17:14
                io_vecA_3,	// src/main/scala/VecDotProduct.scala:17:14
                io_vecB_0,	// src/main/scala/VecDotProduct.scala:17:14
                io_vecB_1,	// src/main/scala/VecDotProduct.scala:17:14
                io_vecB_2,	// src/main/scala/VecDotProduct.scala:17:14
                io_vecB_3,	// src/main/scala/VecDotProduct.scala:17:14
  output [31:0] io_result	// src/main/scala/VecDotProduct.scala:17:14
);

  wire [16:0] _products_0_T = {9'h0, io_vecA_0} * {{9{io_vecB_0[7]}}, io_vecB_0};	// src/main/scala/VecDotProduct.scala:35:31
  wire [16:0] _products_1_T = {9'h0, io_vecA_1} * {{9{io_vecB_1[7]}}, io_vecB_1};	// src/main/scala/VecDotProduct.scala:35:31
  wire [16:0] _products_2_T = {9'h0, io_vecA_2} * {{9{io_vecB_2[7]}}, io_vecB_2};	// src/main/scala/VecDotProduct.scala:35:31
  wire [16:0] _products_3_T = {9'h0, io_vecA_3} * {{9{io_vecB_3[7]}}, io_vecB_3};	// src/main/scala/VecDotProduct.scala:35:31
  assign io_result =
    {{15{_products_0_T[16]}}, _products_0_T} + {{15{_products_1_T[16]}}, _products_1_T}
    + {{15{_products_2_T[16]}}, _products_2_T} + {{15{_products_3_T[16]}}, _products_3_T};	// <stdin>:146:3, src/main/scala/VecDotProduct.scala:35:{17,31}, :38:34
endmodule

module MatrixMultiplicationModule(	// <stdin>:177:3
  input         clock,	// <stdin>:178:11
                reset,	// <stdin>:179:11
                io_start,	// src/main/scala/MatrixMultiplication.scala:34:14
  input  [7:0]  io_dataIn,	// src/main/scala/MatrixMultiplication.scala:34:14
  input  [15:0] io_address,	// src/main/scala/MatrixMultiplication.scala:34:14
  input         io_writeEnable,	// src/main/scala/MatrixMultiplication.scala:34:14
  output        io_finish,	// src/main/scala/MatrixMultiplication.scala:34:14
  output [31:0] io_dataOut	// src/main/scala/MatrixMultiplication.scala:34:14
);

  wire [31:0]      _vecDotProductModule_io_result;	// src/main/scala/MatrixMultiplication.scala:57:35
  wire [31:0]      _memoryModule_io_dataOut;	// src/main/scala/MatrixMultiplication.scala:49:28
  reg  [7:0]       bufferRow_0;	// src/main/scala/MatrixMultiplication.scala:45:26
  reg  [7:0]       bufferRow_1;	// src/main/scala/MatrixMultiplication.scala:45:26
  reg  [7:0]       bufferRow_2;	// src/main/scala/MatrixMultiplication.scala:45:26
  reg  [7:0]       bufferRow_3;	// src/main/scala/MatrixMultiplication.scala:45:26
  reg  [7:0]       bufferCol_0;	// src/main/scala/MatrixMultiplication.scala:46:26
  reg  [7:0]       bufferCol_1;	// src/main/scala/MatrixMultiplication.scala:46:26
  reg  [7:0]       bufferCol_2;	// src/main/scala/MatrixMultiplication.scala:46:26
  reg  [7:0]       bufferCol_3;	// src/main/scala/MatrixMultiplication.scala:46:26
  reg  [1:0]       state;	// src/main/scala/MatrixMultiplication.scala:71:22
  reg  [1:0]       currentRow;	// src/main/scala/MatrixMultiplication.scala:72:27
  reg  [1:0]       currentCol;	// src/main/scala/MatrixMultiplication.scala:73:27
  reg              loadState;	// src/main/scala/MatrixMultiplication.scala:75:26
  reg  [1:0]       index;	// src/main/scala/MatrixMultiplication.scala:76:22
  reg              waitMem;	// src/main/scala/MatrixMultiplication.scala:77:24
  wire             _GEN = state == 2'h0;	// <stdin>:177:3, src/main/scala/MatrixMultiplication.scala:71:22, :90:17
  wire             _GEN_0 = state == 2'h1;	// <stdin>:177:3, src/main/scala/MatrixMultiplication.scala:71:22, :90:17
  wire [4:0]       _GEN_1 = {1'h0, currentRow, 2'h0};	// <stdin>:177:3, src/main/scala/MatrixMultiplication.scala:72:27, :75:26, :101:84
  wire [4:0]       _GEN_2 = {3'h0, currentCol};	// src/main/scala/MatrixMultiplication.scala:73:27, :101:68, :117:79
  wire             _GEN_3 = state == 2'h2;	// <stdin>:177:3, src/main/scala/MatrixMultiplication.scala:71:22, :90:17
  wire             _GEN_4 = _GEN | _GEN_0;	// src/main/scala/MatrixMultiplication.scala:80:26, :90:17
  wire             _GEN_5 = _GEN_4 | ~_GEN_3;	// src/main/scala/MatrixMultiplication.scala:80:26, :90:17
  wire [3:0][15:0] _GEN_6 =
    {{io_address},
     {{8'h0, {1'h0, _GEN_1 + _GEN_2, 2'h0} + 8'h20}},
     {{11'h0, loadState ? {1'h0, index, 2'h0} + _GEN_2 - 5'h10 : _GEN_1 + {3'h0, index}}},
     {io_address}};	// <stdin>:177:3, src/main/scala/MatrixMultiplication.scala:45:34, :75:26, :76:22, :81:27, :90:17, :100:35, :101:{33,68,84}, :116:35, :117:{33,55,79}, :135:{31,53,83}
  always @(posedge clock) begin	// <stdin>:178:11
    if (reset) begin	// <stdin>:178:11
      bufferRow_0 <= 8'h0;	// src/main/scala/MatrixMultiplication.scala:45:{26,34}
      bufferRow_1 <= 8'h0;	// src/main/scala/MatrixMultiplication.scala:45:{26,34}
      bufferRow_2 <= 8'h0;	// src/main/scala/MatrixMultiplication.scala:45:{26,34}
      bufferRow_3 <= 8'h0;	// src/main/scala/MatrixMultiplication.scala:45:{26,34}
      bufferCol_0 <= 8'h0;	// src/main/scala/MatrixMultiplication.scala:45:34, :46:26
      bufferCol_1 <= 8'h0;	// src/main/scala/MatrixMultiplication.scala:45:34, :46:26
      bufferCol_2 <= 8'h0;	// src/main/scala/MatrixMultiplication.scala:45:34, :46:26
      bufferCol_3 <= 8'h0;	// src/main/scala/MatrixMultiplication.scala:45:34, :46:26
      state <= 2'h0;	// <stdin>:177:3, src/main/scala/MatrixMultiplication.scala:71:22
      currentRow <= 2'h0;	// <stdin>:177:3, src/main/scala/MatrixMultiplication.scala:72:27
      currentCol <= 2'h0;	// <stdin>:177:3, src/main/scala/MatrixMultiplication.scala:73:27
      loadState <= 1'h0;	// src/main/scala/MatrixMultiplication.scala:75:26
      index <= 2'h0;	// <stdin>:177:3, src/main/scala/MatrixMultiplication.scala:76:22
      waitMem <= 1'h0;	// src/main/scala/MatrixMultiplication.scala:75:26, :77:24
    end
    else begin	// <stdin>:178:11
      automatic logic            _GEN_7;	// src/main/scala/MatrixMultiplication.scala:45:26, :90:17, :100:35, :102:23
      automatic logic            _GEN_8;	// src/main/scala/MatrixMultiplication.scala:106:28
      automatic logic            _GEN_9;	// src/main/scala/MatrixMultiplication.scala:106:28
      automatic logic            _GEN_10;	// src/main/scala/MatrixMultiplication.scala:46:26, :90:17, :116:35, :118:23
      automatic logic [3:0][1:0] _GEN_11;	// src/main/scala/MatrixMultiplication.scala:71:22, :90:17, :93:22, :116:35, :140:48, :159:13
      automatic logic [3:0]      _GEN_12;	// src/main/scala/MatrixMultiplication.scala:75:26, :90:17, :100:35, :140:48
      _GEN_7 = _GEN_0 & ~loadState;	// src/main/scala/MatrixMultiplication.scala:45:26, :75:26, :90:17, :100:{22,35}, :102:23
      _GEN_8 = index != 2'h1;	// <stdin>:177:3, src/main/scala/MatrixMultiplication.scala:76:22, :106:28
      _GEN_9 = index != 2'h2;	// <stdin>:177:3, src/main/scala/MatrixMultiplication.scala:76:22, :106:28
      _GEN_10 = _GEN_0 & loadState;	// src/main/scala/MatrixMultiplication.scala:46:26, :75:26, :90:17, :116:35, :118:23
      if (_GEN | ~_GEN_7 | waitMem | (|index)) begin	// src/main/scala/MatrixMultiplication.scala:45:26, :76:22, :77:24, :90:17, :100:35, :102:23, :106:28
      end
      else	// src/main/scala/MatrixMultiplication.scala:45:26, :90:17
        bufferRow_0 <= _memoryModule_io_dataOut[7:0];	// src/main/scala/MatrixMultiplication.scala:45:26, :49:28, :106:28
      if (_GEN | ~_GEN_7 | waitMem | _GEN_8) begin	// src/main/scala/MatrixMultiplication.scala:45:26, :77:24, :90:17, :100:35, :102:23, :106:28
      end
      else	// src/main/scala/MatrixMultiplication.scala:45:26, :90:17
        bufferRow_1 <= _memoryModule_io_dataOut[7:0];	// src/main/scala/MatrixMultiplication.scala:45:26, :49:28, :106:28
      if (_GEN | ~_GEN_7 | waitMem | _GEN_9) begin	// src/main/scala/MatrixMultiplication.scala:45:26, :77:24, :90:17, :100:35, :102:23, :106:28
      end
      else	// src/main/scala/MatrixMultiplication.scala:45:26, :90:17
        bufferRow_2 <= _memoryModule_io_dataOut[7:0];	// src/main/scala/MatrixMultiplication.scala:45:26, :49:28, :106:28
      if (_GEN | ~_GEN_7 | waitMem | ~(&index)) begin	// src/main/scala/MatrixMultiplication.scala:45:26, :76:22, :77:24, :90:17, :100:35, :102:23, :106:28
      end
      else	// src/main/scala/MatrixMultiplication.scala:45:26, :90:17
        bufferRow_3 <= _memoryModule_io_dataOut[7:0];	// src/main/scala/MatrixMultiplication.scala:45:26, :49:28, :106:28
      if (_GEN | ~_GEN_10 | waitMem | (|index)) begin	// src/main/scala/MatrixMultiplication.scala:46:26, :76:22, :77:24, :90:17, :106:28, :116:35, :118:23
      end
      else	// src/main/scala/MatrixMultiplication.scala:46:26, :90:17
        bufferCol_0 <= _memoryModule_io_dataOut[7:0];	// src/main/scala/MatrixMultiplication.scala:46:26, :49:28, :106:28
      if (_GEN | ~_GEN_10 | waitMem | _GEN_8) begin	// src/main/scala/MatrixMultiplication.scala:46:26, :77:24, :90:17, :106:28, :116:35, :118:23
      end
      else	// src/main/scala/MatrixMultiplication.scala:46:26, :90:17
        bufferCol_1 <= _memoryModule_io_dataOut[7:0];	// src/main/scala/MatrixMultiplication.scala:46:26, :49:28, :106:28
      if (_GEN | ~_GEN_10 | waitMem | _GEN_9) begin	// src/main/scala/MatrixMultiplication.scala:46:26, :77:24, :90:17, :106:28, :116:35, :118:23
      end
      else	// src/main/scala/MatrixMultiplication.scala:46:26, :90:17
        bufferCol_2 <= _memoryModule_io_dataOut[7:0];	// src/main/scala/MatrixMultiplication.scala:46:26, :49:28, :106:28
      if (_GEN | ~_GEN_10 | waitMem | ~(&index)) begin	// src/main/scala/MatrixMultiplication.scala:45:26, :46:26, :76:22, :77:24, :90:17, :102:23, :106:28, :116:35, :118:23
      end
      else	// src/main/scala/MatrixMultiplication.scala:46:26, :90:17
        bufferCol_3 <= _memoryModule_io_dataOut[7:0];	// src/main/scala/MatrixMultiplication.scala:46:26, :49:28, :106:28
      _GEN_11 =
        {{2'h0},
         {{(&currentCol) & (&currentRow), 1'h1}},
         {~loadState | waitMem | ~(&index) ? state : 2'h2},
         {io_start ? 2'h1 : state}};	// <stdin>:177:3, src/main/scala/MatrixMultiplication.scala:45:26, :71:22, :72:27, :73:27, :75:26, :76:22, :77:24, :90:17, :93:22, :94:15, :100:35, :102:23, :105:19, :106:28, :116:35, :118:23, :140:{23,48}, :143:{25,50}, :145:17, :148:17, :153:15, :159:13
      state <= _GEN_11[state];	// src/main/scala/MatrixMultiplication.scala:71:22, :90:17, :93:22, :116:35, :140:48, :159:13
      if (_GEN_4 | ~(_GEN_3 & (&currentCol))) begin	// src/main/scala/MatrixMultiplication.scala:72:27, :73:27, :80:26, :90:17, :140:{23,48}, :143:50
      end
      else if (&currentRow)	// src/main/scala/MatrixMultiplication.scala:72:27, :143:25
        currentRow <= 2'h0;	// <stdin>:177:3, src/main/scala/MatrixMultiplication.scala:72:27
      else	// src/main/scala/MatrixMultiplication.scala:143:25
        currentRow <= currentRow + 2'h1;	// <stdin>:177:3, src/main/scala/MatrixMultiplication.scala:72:27, :147:36
      if (_GEN_5) begin	// src/main/scala/MatrixMultiplication.scala:73:27, :80:26, :90:17
      end
      else if (&currentCol)	// src/main/scala/MatrixMultiplication.scala:73:27, :140:23
        currentCol <= 2'h0;	// <stdin>:177:3, src/main/scala/MatrixMultiplication.scala:73:27
      else	// src/main/scala/MatrixMultiplication.scala:140:23
        currentCol <= currentCol + 2'h1;	// <stdin>:177:3, src/main/scala/MatrixMultiplication.scala:73:27, :152:34
      _GEN_12 =
        {{loadState},
         {~(&currentCol)},
         {~loadState & ~waitMem & (&index) | loadState},
         {loadState}};	// src/main/scala/MatrixMultiplication.scala:73:27, :75:26, :76:22, :77:24, :90:17, :100:35, :102:23, :105:19, :106:28, :107:47, :140:{23,48}, :141:19, :151:19
      loadState <= _GEN_12[state];	// src/main/scala/MatrixMultiplication.scala:71:22, :75:26, :90:17, :100:35, :140:48
      if (_GEN | ~_GEN_0) begin	// src/main/scala/MatrixMultiplication.scala:77:24, :90:17
      end
      else if (loadState) begin	// src/main/scala/MatrixMultiplication.scala:75:26
        if (waitMem) begin	// src/main/scala/MatrixMultiplication.scala:77:24
        end
        else if (&index)	// src/main/scala/MatrixMultiplication.scala:76:22, :106:28
          index <= 2'h0;	// <stdin>:177:3, src/main/scala/MatrixMultiplication.scala:76:22
        else	// src/main/scala/MatrixMultiplication.scala:106:28
          index <= index + 2'h1;	// <stdin>:177:3, src/main/scala/MatrixMultiplication.scala:76:22, :127:28
        waitMem <= ~waitMem;	// src/main/scala/MatrixMultiplication.scala:75:26, :77:24, :102:23, :103:19, :105:19
      end
      else begin	// src/main/scala/MatrixMultiplication.scala:75:26
        if (loadState | waitMem) begin	// src/main/scala/MatrixMultiplication.scala:75:26, :76:22, :77:24, :100:35, :102:23
        end
        else if (&index)	// src/main/scala/MatrixMultiplication.scala:76:22, :106:28
          index <= 2'h0;	// <stdin>:177:3, src/main/scala/MatrixMultiplication.scala:76:22
        else	// src/main/scala/MatrixMultiplication.scala:106:28
          index <= index + 2'h1;	// <stdin>:177:3, src/main/scala/MatrixMultiplication.scala:76:22, :111:28
        waitMem <= loadState ^ ~waitMem;	// src/main/scala/MatrixMultiplication.scala:75:26, :77:24, :100:35, :102:23
      end
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// <stdin>:177:3
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:177:3
      `FIRRTL_BEFORE_INITIAL	// <stdin>:177:3
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:177:3
      automatic logic [31:0] _RANDOM[0:2];	// <stdin>:177:3
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:177:3
        `INIT_RANDOM_PROLOG_	// <stdin>:177:3
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:177:3
        for (logic [1:0] i = 2'h0; i < 2'h3; i += 2'h1) begin
          _RANDOM[i] = `RANDOM;	// <stdin>:177:3
        end	// <stdin>:177:3
        bufferRow_0 = _RANDOM[2'h0][7:0];	// <stdin>:177:3, src/main/scala/MatrixMultiplication.scala:45:26
        bufferRow_1 = _RANDOM[2'h0][15:8];	// <stdin>:177:3, src/main/scala/MatrixMultiplication.scala:45:26
        bufferRow_2 = _RANDOM[2'h0][23:16];	// <stdin>:177:3, src/main/scala/MatrixMultiplication.scala:45:26
        bufferRow_3 = _RANDOM[2'h0][31:24];	// <stdin>:177:3, src/main/scala/MatrixMultiplication.scala:45:26
        bufferCol_0 = _RANDOM[2'h1][7:0];	// <stdin>:177:3, src/main/scala/MatrixMultiplication.scala:46:26
        bufferCol_1 = _RANDOM[2'h1][15:8];	// <stdin>:177:3, src/main/scala/MatrixMultiplication.scala:46:26
        bufferCol_2 = _RANDOM[2'h1][23:16];	// <stdin>:177:3, src/main/scala/MatrixMultiplication.scala:46:26
        bufferCol_3 = _RANDOM[2'h1][31:24];	// <stdin>:177:3, src/main/scala/MatrixMultiplication.scala:46:26
        state = _RANDOM[2'h2][1:0];	// <stdin>:177:3, src/main/scala/MatrixMultiplication.scala:71:22
        currentRow = _RANDOM[2'h2][3:2];	// <stdin>:177:3, src/main/scala/MatrixMultiplication.scala:71:22, :72:27
        currentCol = _RANDOM[2'h2][5:4];	// <stdin>:177:3, src/main/scala/MatrixMultiplication.scala:71:22, :73:27
        loadState = _RANDOM[2'h2][6];	// <stdin>:177:3, src/main/scala/MatrixMultiplication.scala:71:22, :75:26
        index = _RANDOM[2'h2][8:7];	// <stdin>:177:3, src/main/scala/MatrixMultiplication.scala:71:22, :76:22
        waitMem = _RANDOM[2'h2][9];	// <stdin>:177:3, src/main/scala/MatrixMultiplication.scala:71:22, :77:24
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:177:3
      `FIRRTL_AFTER_INITIAL	// <stdin>:177:3
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  MemoryModule memoryModule (	// src/main/scala/MatrixMultiplication.scala:49:28
    .clock          (clock),
    .reset          (reset),
    .io_dataIn      (_GEN_5 ? {24'h0, io_dataIn} : _vecDotProductModule_io_result),	// src/main/scala/MatrixMultiplication.scala:57:35, :80:26, :90:17
    .io_address     (_GEN_6[state]),	// src/main/scala/MatrixMultiplication.scala:71:22, :81:27, :90:17, :116:35, :135:31
    .io_dataSize    (_GEN ? 2'h2 : {~_GEN_0, 1'h0}),	// <stdin>:177:3, src/main/scala/MatrixMultiplication.scala:75:26, :77:24, :82:28, :90:17, :98:32
    .io_writeEnable (~_GEN_4 & _GEN_3 | io_writeEnable),	// src/main/scala/MatrixMultiplication.scala:80:26, :83:31, :90:17
    .io_dataOut     (_memoryModule_io_dataOut)
  );
  VecDotProductModule vecDotProductModule (	// src/main/scala/MatrixMultiplication.scala:57:35
    .io_vecA_0 (bufferRow_0),	// src/main/scala/MatrixMultiplication.scala:45:26
    .io_vecA_1 (bufferRow_1),	// src/main/scala/MatrixMultiplication.scala:45:26
    .io_vecA_2 (bufferRow_2),	// src/main/scala/MatrixMultiplication.scala:45:26
    .io_vecA_3 (bufferRow_3),	// src/main/scala/MatrixMultiplication.scala:45:26
    .io_vecB_0 (bufferCol_0),	// src/main/scala/MatrixMultiplication.scala:46:26
    .io_vecB_1 (bufferCol_1),	// src/main/scala/MatrixMultiplication.scala:46:26
    .io_vecB_2 (bufferCol_2),	// src/main/scala/MatrixMultiplication.scala:46:26
    .io_vecB_3 (bufferCol_3),	// src/main/scala/MatrixMultiplication.scala:46:26
    .io_result (_vecDotProductModule_io_result)
  );
  assign io_finish = ~(_GEN | _GEN_0 | _GEN_3) & (&state);	// <stdin>:177:3, src/main/scala/MatrixMultiplication.scala:71:22, :86:13, :90:17
  assign io_dataOut = _memoryModule_io_dataOut;	// <stdin>:177:3, src/main/scala/MatrixMultiplication.scala:49:28
endmodule

module MMTopModule(	// <stdin>:319:3
  input         clock,	// <stdin>:320:11
                reset,	// <stdin>:321:11
                io_operation,	// src/main/scala/MMTop.scala:27:14
  input  [8:0]  io_dataIn,	// src/main/scala/MMTop.scala:27:14
  input  [15:0] io_address,	// src/main/scala/MMTop.scala:27:14
  input         io_enable,	// src/main/scala/MMTop.scala:27:14
                io_writeEnable,	// src/main/scala/MMTop.scala:27:14
                io_start,	// src/main/scala/MMTop.scala:27:14
  output [31:0] io_dataOut,	// src/main/scala/MMTop.scala:27:14
  output        io_busy	// src/main/scala/MMTop.scala:27:14
);

  wire _matrixMultiplicationModule_io_finish;	// src/main/scala/MMTop.scala:43:42
  MatrixMultiplicationModule matrixMultiplicationModule (	// src/main/scala/MMTop.scala:43:42
    .clock          (clock),
    .reset          (reset),
    .io_start       (io_operation & io_start),	// src/main/scala/MMTop.scala:59:77
    .io_dataIn      (io_dataIn[7:0]),	// src/main/scala/MMTop.scala:60:{40,53}
    .io_address     (io_address),
    .io_writeEnable (~io_operation & io_enable & io_writeEnable),	// src/main/scala/MMTop.scala:62:{62,97}
    .io_finish      (_matrixMultiplicationModule_io_finish),
    .io_dataOut     (io_dataOut)
  );
  assign io_busy = ~_matrixMultiplicationModule_io_finish;	// <stdin>:319:3, src/main/scala/MMTop.scala:43:42, :64:14
endmodule

module FPGAShell(	// <stdin>:341:3
  input  clock,	// <stdin>:342:11
         reset,	// <stdin>:343:11
         io_start,	// src/main/scala/verilog/Shell.scala:47:14
         io_check,	// src/main/scala/verilog/Shell.scala:47:14
  output io_finish,	// src/main/scala/verilog/Shell.scala:47:14
         io_correct	// src/main/scala/verilog/Shell.scala:47:14
);

  wire [31:0]      _dut_io_dataOut;	// src/main/scala/verilog/Shell.scala:101:19
  wire             _dut_io_busy;	// src/main/scala/verilog/Shell.scala:101:19
  wire [15:0][7:0] _GEN =
    {8'hEB,
     8'hA2,
     8'hF0,
     8'hFA,
     8'hCC,
     8'hAB,
     8'hFC,
     8'hC5,
     8'hA8,
     8'hC6,
     8'hF0,
     8'hBE,
     8'hCE,
     8'hEE,
     8'h9E,
     8'h98};	// src/main/scala/verilog/Shell.scala:164:21
  wire [15:0][7:0] _GEN_0 =
    {8'hF2,
     8'hAF,
     8'h1E,
     8'hF0,
     8'h77,
     8'h48,
     8'h55,
     8'hF0,
     8'h72,
     8'h6,
     8'hFD,
     8'hD9,
     8'h6E,
     8'hB4,
     8'h8A,
     8'h6D};	// src/main/scala/verilog/Shell.scala:148:21
  reg              correct;	// src/main/scala/verilog/Shell.scala:104:24
  reg              finish;	// src/main/scala/verilog/Shell.scala:105:23
  reg  [9:0]       memAddr;	// src/main/scala/verilog/Shell.scala:106:24
  reg  [9:0]       romAddr;	// src/main/scala/verilog/Shell.scala:107:24
  reg  [2:0]       state;	// src/main/scala/verilog/Shell.scala:120:22
  reg              waitMem;	// src/main/scala/verilog/Shell.scala:129:24
  wire             _GEN_1 = state == 3'h0;	// src/main/scala/verilog/Shell.scala:120:22, :131:17
  wire             _GEN_2 = state == 3'h1;	// src/main/scala/verilog/Shell.scala:120:22, :123:11, :131:17
  wire [7:0]       _GEN_3 = _GEN_0[memAddr[3:0]];	// <stdin>:444:33, src/main/scala/verilog/Shell.scala:106:24, :148:21
  wire             _GEN_4 = state == 3'h2;	// src/main/scala/verilog/Shell.scala:120:22, :123:30, :131:17
  wire [7:0]       _GEN_5 = _GEN[memAddr[3:0]];	// <stdin>:458:37, src/main/scala/verilog/Shell.scala:106:24, :164:21
  wire             _GEN_6 = state == 3'h3;	// src/main/scala/verilog/Shell.scala:120:22, :131:17, :175:15
  wire             _GEN_7 = _GEN_2 | _GEN_4;	// src/main/scala/verilog/Shell.scala:114:16, :131:17
  wire             _GEN_8 = state == 3'h4;	// src/main/scala/verilog/Shell.scala:120:22, :131:17, :181:13
  wire             _GEN_9 = state == 3'h5;	// src/main/scala/verilog/Shell.scala:120:22, :123:49, :131:17
  wire             _GEN_10 = _GEN_6 | _GEN_8;	// src/main/scala/verilog/Shell.scala:129:24, :131:17
  always @(posedge clock) begin	// <stdin>:342:11
    if (reset) begin	// <stdin>:342:11
      correct <= 1'h0;	// <stdin>:341:3, src/main/scala/verilog/Shell.scala:104:24
      finish <= 1'h0;	// <stdin>:341:3, src/main/scala/verilog/Shell.scala:105:23
      memAddr <= 10'h0;	// src/main/scala/verilog/Shell.scala:106:24
      romAddr <= 10'h0;	// src/main/scala/verilog/Shell.scala:106:24, :107:24
      state <= 3'h0;	// src/main/scala/verilog/Shell.scala:120:22
      waitMem <= 1'h1;	// <stdin>:341:3, src/main/scala/verilog/Shell.scala:129:24
    end
    else begin	// <stdin>:342:11
      automatic logic [15:0][31:0] _GEN_11 =
        {32'hFFFF8F6A,
         32'hFFFF555D,
         32'hFFFF9064,
         32'hFFFF68C3,
         32'hFFFF9B85,
         32'hFFFF9844,
         32'hFFFF9640,
         32'hFFFF7534,
         32'hFFFF7414,
         32'hFFFF8B92,
         32'hFFFF95E6,
         32'hFFFF6290,
         32'hFFFF8DB0,
         32'hFFFF74EA,
         32'hFFFFC3F6,
         32'hFFFF8414};	// src/main/scala/verilog/Shell.scala:195:37
      automatic logic              _GEN_12 = io_start | io_check;	// src/main/scala/verilog/Shell.scala:105:23, :133:22, :135:16, :138:28, :141:16
      automatic logic              _GEN_13;	// src/main/scala/verilog/Shell.scala:158:20
      automatic logic              _GEN_14;	// src/main/scala/verilog/Shell.scala:174:20
      automatic logic              _GEN_15;	// src/main/scala/verilog/Shell.scala:129:24, :131:17
      automatic logic              wrong;	// src/main/scala/verilog/Shell.scala:195:37
      automatic logic              _GEN_16;	// src/main/scala/verilog/Shell.scala:209:28
      automatic logic              _GEN_17;	// src/main/scala/verilog/Shell.scala:105:23, :205:21, :206:18, :209:56, :210:18
      automatic logic              _GEN_18;	// src/main/scala/verilog/Shell.scala:105:23, :131:17, :188:21
      automatic logic              _GEN_19;	// src/main/scala/verilog/Shell.scala:104:24, :131:17
      automatic logic              _GEN_20;	// src/main/scala/verilog/Shell.scala:106:24, :188:21, :205:21, :209:56, :214:19
      automatic logic [9:0]        _GEN_21;	// src/main/scala/verilog/Shell.scala:106:24, :131:17
      automatic logic [9:0]        _GEN_22;	// src/main/scala/verilog/Shell.scala:107:24, :131:17
      automatic logic [7:0]        _GEN_23;	// src/main/scala/verilog/Shell.scala:104:24, :131:17, :133:22
      automatic logic [7:0]        _GEN_24;	// src/main/scala/verilog/Shell.scala:105:23, :131:17, :133:22, :184:14
      automatic logic [7:0][9:0]   _GEN_25;	// src/main/scala/verilog/Shell.scala:106:24, :131:17, :133:22, :158:71, :174:71
      automatic logic [7:0][9:0]   _GEN_26;	// src/main/scala/verilog/Shell.scala:107:24, :131:17, :133:22
      _GEN_13 = memAddr == 10'hF;	// src/main/scala/verilog/Shell.scala:106:24, :158:20
      _GEN_14 = memAddr == 10'h1F;	// src/main/scala/verilog/Shell.scala:106:24, :174:20
      _GEN_15 = _GEN_2 | _GEN_4 | _GEN_10;	// src/main/scala/verilog/Shell.scala:129:24, :131:17
      wrong = _dut_io_dataOut != _GEN_11[romAddr[3:0]];	// <stdin>:491:35, src/main/scala/verilog/Shell.scala:101:19, :107:24, :195:37
      _GEN_16 = romAddr == 10'hF;	// src/main/scala/verilog/Shell.scala:107:24, :158:20, :209:28
      _GEN_17 = wrong | _GEN_16;	// src/main/scala/verilog/Shell.scala:105:23, :195:37, :205:21, :206:18, :209:{28,56}, :210:18
      _GEN_18 = _GEN_9 & ~waitMem & _GEN_17 | finish;	// src/main/scala/verilog/Shell.scala:105:23, :129:24, :131:17, :188:21, :205:21, :206:18, :209:56, :210:18
      _GEN_19 = _GEN_15 | ~_GEN_9 | waitMem ? correct : ~wrong & (_GEN_16 | correct);	// src/main/scala/verilog/Shell.scala:104:24, :129:24, :131:17, :188:21, :195:37, :205:21, :207:19, :209:{28,56}, :211:19
      _GEN_20 = waitMem | _GEN_17;	// src/main/scala/verilog/Shell.scala:105:23, :106:24, :129:24, :188:21, :205:21, :206:18, :209:56, :210:18, :214:19
      _GEN_21 = _GEN_10 | ~_GEN_9 | _GEN_20 ? memAddr : memAddr + 10'h4;	// src/main/scala/verilog/Shell.scala:104:24, :106:24, :129:24, :131:17, :188:21, :205:21, :209:56, :214:{19,30}
      _GEN_22 = _GEN_15 | ~_GEN_9 | _GEN_20 ? romAddr : romAddr + 10'h1;	// src/main/scala/verilog/Shell.scala:104:24, :106:24, :107:24, :129:24, :131:17, :151:26, :188:21, :205:21, :209:56, :214:19, :215:30
      _GEN_23 =
        {{_GEN_19},
         {_GEN_19},
         {_GEN_19},
         {correct},
         {correct},
         {correct},
         {correct},
         {~_GEN_12 & correct}};	// src/main/scala/verilog/Shell.scala:104:24, :105:23, :131:17, :133:22, :135:16, :136:17, :138:28, :141:16, :142:17
      correct <= _GEN_23[state];	// src/main/scala/verilog/Shell.scala:104:24, :120:22, :131:17, :133:22
      _GEN_24 =
        {{_GEN_18},
         {_GEN_18},
         {_GEN_18},
         {~_dut_io_busy},
         {finish},
         {finish},
         {finish},
         {~_GEN_12 & finish}};	// src/main/scala/verilog/Shell.scala:101:19, :105:23, :131:17, :133:22, :135:16, :138:28, :141:16, :184:{14,21}, :188:21
      finish <= _GEN_24[state];	// src/main/scala/verilog/Shell.scala:105:23, :120:22, :131:17, :133:22, :184:14
      _GEN_25 =
        {{_GEN_21},
         {_GEN_21},
         {_GEN_21},
         {memAddr},
         {memAddr},
         {_GEN_14 ? 10'h0 : memAddr + 10'h1},
         {_GEN_13 ? 10'h10 : memAddr + 10'h1},
         {io_start ? 10'h0 : io_check ? 10'h20 : memAddr}};	// src/main/scala/verilog/Shell.scala:106:24, :131:17, :133:22, :134:17, :138:28, :139:17, :151:{15,26}, :158:{20,71}, :160:17, :167:{15,26}, :174:{20,71}, :176:17
      memAddr <= _GEN_25[state];	// src/main/scala/verilog/Shell.scala:106:24, :120:22, :131:17, :133:22, :158:71, :174:71
      _GEN_26 =
        {{_GEN_22},
         {_GEN_22},
         {_GEN_22},
         {romAddr},
         {romAddr},
         {romAddr},
         {romAddr},
         {io_start | ~io_check ? romAddr : 10'h0}};	// src/main/scala/verilog/Shell.scala:106:24, :107:24, :131:17, :133:22, :138:28
      romAddr <= _GEN_26[state];	// src/main/scala/verilog/Shell.scala:107:24, :120:22, :131:17, :133:22
      if (_GEN_1) begin	// src/main/scala/verilog/Shell.scala:131:17
        if (io_start)	// src/main/scala/verilog/Shell.scala:47:14
          state <= 3'h1;	// src/main/scala/verilog/Shell.scala:120:22, :123:11
        else if (io_check)	// src/main/scala/verilog/Shell.scala:47:14
          state <= 3'h5;	// src/main/scala/verilog/Shell.scala:120:22, :123:49
        waitMem <= ~io_start & io_check | waitMem;	// src/main/scala/verilog/Shell.scala:129:24, :133:22, :138:28
      end
      else begin	// src/main/scala/verilog/Shell.scala:131:17
        if (_GEN_2) begin	// src/main/scala/verilog/Shell.scala:131:17
          if (_GEN_13)	// src/main/scala/verilog/Shell.scala:158:20
            state <= 3'h2;	// src/main/scala/verilog/Shell.scala:120:22, :123:30
        end
        else if (_GEN_4) begin	// src/main/scala/verilog/Shell.scala:131:17
          if (_GEN_14)	// src/main/scala/verilog/Shell.scala:174:20
            state <= 3'h3;	// src/main/scala/verilog/Shell.scala:120:22, :175:15
        end
        else if (_GEN_6)	// src/main/scala/verilog/Shell.scala:131:17
          state <= 3'h4;	// src/main/scala/verilog/Shell.scala:120:22, :181:13
        else if (_GEN_8 ? _dut_io_busy : ~_GEN_9 | waitMem | ~_GEN_17) begin	// src/main/scala/verilog/Shell.scala:101:19, :104:24, :105:23, :120:22, :129:24, :131:17, :185:{13,19}, :188:21, :205:21, :206:18, :209:56, :210:18
        end
        else	// src/main/scala/verilog/Shell.scala:120:22, :131:17, :185:{13,19}, :188:21
          state <= 3'h0;	// src/main/scala/verilog/Shell.scala:120:22
        waitMem <= ~_GEN_15 & _GEN_9 ^ waitMem;	// src/main/scala/verilog/Shell.scala:129:24, :131:17
      end
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// <stdin>:341:3
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:341:3
      `FIRRTL_BEFORE_INITIAL	// <stdin>:341:3
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:341:3
      automatic logic [31:0] _RANDOM[0:0];	// <stdin>:341:3
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:341:3
        `INIT_RANDOM_PROLOG_	// <stdin>:341:3
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:341:3
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;	// <stdin>:341:3
        correct = _RANDOM[/*Zero width*/ 1'b0][0];	// <stdin>:341:3, src/main/scala/verilog/Shell.scala:104:24
        finish = _RANDOM[/*Zero width*/ 1'b0][1];	// <stdin>:341:3, src/main/scala/verilog/Shell.scala:104:24, :105:23
        memAddr = _RANDOM[/*Zero width*/ 1'b0][11:2];	// <stdin>:341:3, src/main/scala/verilog/Shell.scala:104:24, :106:24
        romAddr = _RANDOM[/*Zero width*/ 1'b0][21:12];	// <stdin>:341:3, src/main/scala/verilog/Shell.scala:104:24, :107:24
        state = _RANDOM[/*Zero width*/ 1'b0][24:22];	// <stdin>:341:3, src/main/scala/verilog/Shell.scala:104:24, :120:22
        waitMem = _RANDOM[/*Zero width*/ 1'b0][25];	// <stdin>:341:3, src/main/scala/verilog/Shell.scala:104:24, :129:24
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:341:3
      `FIRRTL_AFTER_INITIAL	// <stdin>:341:3
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  MMTopModule dut (	// src/main/scala/verilog/Shell.scala:101:19
    .clock          (clock),
    .reset          (reset),
    .io_operation   (~(state == 3'h1 | state == 3'h2 | state == 3'h5)),	// src/main/scala/verilog/Shell.scala:104:24, :120:22, :122:26, :123:{11,30,40,49}
    .io_dataIn
      (_GEN_1
         ? 9'h0
         : _GEN_2 ? {_GEN_3[7], _GEN_3} : _GEN_4 ? {_GEN_5[7], _GEN_5} : 9'h0),	// src/main/scala/verilog/Shell.scala:110:17, :131:17, :148:21, :164:21
    .io_address     ({6'h0, memAddr}),	// src/main/scala/verilog/Shell.scala:106:24, :111:18
    .io_enable      (~_GEN_1 & (_GEN_7 | ~_GEN_10 & _GEN_9 & ~waitMem)),	// src/main/scala/verilog/Shell.scala:104:24, :112:22, :113:17, :114:16, :122:26, :129:24, :131:17, :150:21, :166:21, :188:21, :189:17, :191:17
    .io_writeEnable (~_GEN_1 & (_GEN_2 | _GEN_4)),	// src/main/scala/verilog/Shell.scala:112:22, :131:17, :149:26
    .io_start       (~(_GEN_1 | _GEN_7) & _GEN_6),	// src/main/scala/verilog/Shell.scala:114:16, :131:17
    .io_dataOut     (_dut_io_dataOut),
    .io_busy        (_dut_io_busy)
  );
  assign io_finish = finish;	// <stdin>:341:3, src/main/scala/verilog/Shell.scala:105:23
  assign io_correct = correct;	// <stdin>:341:3, src/main/scala/verilog/Shell.scala:104:24
endmodule

module FPGAShellWrapper(	// <stdin>:512:3
  input  start,	// src/main/scala/verilog/ShellWrapper.scala:11:17
         check,	// src/main/scala/verilog/ShellWrapper.scala:12:17
         clock,	// src/main/scala/verilog/ShellWrapper.scala:13:17
         reset,	// src/main/scala/verilog/ShellWrapper.scala:14:17
  output finish,	// src/main/scala/verilog/ShellWrapper.scala:16:18
         correct	// src/main/scala/verilog/ShellWrapper.scala:17:19
);

  FPGAShell shell (	// src/main/scala/verilog/ShellWrapper.scala:21:11
    .clock      (clock),
    .reset      (~reset),	// src/main/scala/verilog/ShellWrapper.scala:20:40
    .io_start   (~start),	// src/main/scala/verilog/ShellWrapper.scala:24:21
    .io_check   (~check),	// src/main/scala/verilog/ShellWrapper.scala:25:21
    .io_finish  (finish),
    .io_correct (correct)
  );
endmodule

